[
  {
    "id" : "1e954d54-6cff-4ec6-8d54-178b64caeae7",
    "prId" : 1366,
    "comments" : [
      {
        "id" : "d2fc2e67-7f17-4c5f-9908-a1eb153b1341",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This comment needs to go inside the method, and use `//` instead of `/* ... */`.",
        "createdAt" : "2018-10-17T09:35:58Z",
        "updatedAt" : "2018-10-17T22:33:38Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "d84044142b69a0d2d4a7eb9c58e8ba8e8da5dd28",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,114 @@\n+#ifndef IMMIX_BYTEMAP_H\n+#define IMMIX_BYTEMAP_H\n+\n+#include <stddef.h>\n+#include <stdbool.h>\n+#include <string.h>\n+#include \"../GCTypes.h\"\n+#include \"../Constants.h\"\n+#include \"../Log.h\"\n+\n+typedef struct {\n+    word_t *firstAddress;\n+    size_t size;\n+    ubyte_t *end;\n+    ubyte_t data[0];\n+} Bytemap;\n+\n+typedef enum {\n+    bm_free = 0x0,\n+    bm_placeholder = 0x1,\n+    bm_allocated = 0x2,\n+    bm_marked = 0x4,\n+} Flag;\n+\n+void Bytemap_Init(Bytemap *bytemap, word_t *firstAddress, size_t size);\n+\n+static inline size_t Bytemap_index(Bytemap *bytemap, word_t *address) {\n+    size_t index =\n+        (address - bytemap->firstAddress) / ALLOCATION_ALIGNMENT_WORDS;\n+    assert(address >= bytemap->firstAddress);\n+    assert(index < bytemap->size);\n+    assert(((word_t)address & ALLOCATION_ALIGNMENT_INVERSE_MASK) ==\n+           (word_t)address);\n+    return index;\n+}\n+\n+static inline ubyte_t *Bytemap_Cursor(Bytemap *bytemap, word_t *address) {\n+    size_t index =\n+        (address - bytemap->firstAddress) / ALLOCATION_ALIGNMENT_WORDS;\n+    assert(address >= bytemap->firstAddress);\n+    assert(index < bytemap->size);\n+    assert(((word_t)address & ALLOCATION_ALIGNMENT_INVERSE_MASK) ==\n+           (word_t)address);\n+    return &bytemap->data[index];\n+}\n+\n+static inline bool Bytemap_IsFree(Bytemap *bytemap, word_t *address) {\n+    return bytemap->data[Bytemap_index(bytemap, address)] == bm_free;\n+}\n+\n+static inline bool Bytemap_IsPlaceholder(Bytemap *bytemap, word_t *address) {\n+    return bytemap->data[Bytemap_index(bytemap, address)] == bm_placeholder;\n+}\n+\n+static inline bool Bytemap_IsAllocated(Bytemap *bytemap, word_t *address) {\n+    return bytemap->data[Bytemap_index(bytemap, address)] == bm_allocated;\n+}\n+\n+static inline bool Bytemap_IsMarked(Bytemap *bytemap, word_t *address) {\n+    return bytemap->data[Bytemap_index(bytemap, address)] == bm_marked;\n+}\n+\n+static inline void Bytemap_SetFree(Bytemap *bytemap, word_t *address) {\n+    bytemap->data[Bytemap_index(bytemap, address)] = bm_free;\n+}\n+\n+static inline void Bytemap_SetPlaceholder(Bytemap *bytemap, word_t *address) {\n+    bytemap->data[Bytemap_index(bytemap, address)] = bm_placeholder;\n+}\n+\n+static inline void Bytemap_SetAllocated(Bytemap *bytemap, word_t *address) {\n+    bytemap->data[Bytemap_index(bytemap, address)] = bm_allocated;\n+}\n+\n+static inline void Bytemap_SetMarked(Bytemap *bytemap, word_t *address) {\n+    bytemap->data[Bytemap_index(bytemap, address)] = bm_marked;\n+}\n+\n+static inline ubyte_t *Bytemap_NextLine(ubyte_t *cursor) {\n+    return cursor + WORDS_IN_LINE / ALLOCATION_ALIGNMENT_WORDS;\n+}\n+\n+static inline void Bytemap_ClearLineAt(ubyte_t *cursor) {\n+    memset(cursor, 0, WORDS_IN_LINE / ALLOCATION_ALIGNMENT_WORDS);\n+}\n+\n+static inline void Bytemap_ClearBlock(Bytemap *bytemap, word_t *start) {\n+    memset(Bytemap_Cursor(bytemap, start), 0,\n+           WORDS_IN_BLOCK / ALLOCATION_ALIGNMENT_WORDS);\n+}\n+\n+/*\n+    implements this, just with hardcoded constants:\n+\n+    size_t startIndex = Bytemap_index(bytemap, start);\n+    size_t endIndex = startIndex + WORDS_IN_LINE / ALLOCATION_ALIGNMENT_WORDS;\n+    ubyte_t *data = bytemap->data;\n+    for (size_t i = startIndex; i < endIndex; i++) {\n+        if (data[i] == bm_marked) {\n+            data[i] = bm_allocated;\n+        } else if (data[i] == bm_allocated) {\n+            data[i] = bm_free;\n+        }\n+    }\n+*/"
  },
  {
    "id" : "cf6d5f63-e8b0-4078-8e98-54064d619162",
    "prId" : 1366,
    "comments" : [
      {
        "id" : "3291421a-48d6-4eff-ad65-4e79c9f24e31",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "I have an impression that this module has two conceptual things merged in one: byte mapping and object metadata. When you access a bytemap you should get a pointer to object metadata back, and getters/setters to modify the header should go into its own module. Object metadata might evolve to store more info, so it's best to keep it separate conceptually. ",
        "createdAt" : "2018-10-17T09:38:20Z",
        "updatedAt" : "2018-10-17T22:33:38Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d84044142b69a0d2d4a7eb9c58e8ba8e8da5dd28",
    "line" : 17,
    "diffHunk" : "@@ -0,0 +1,114 @@\n+#ifndef IMMIX_BYTEMAP_H\n+#define IMMIX_BYTEMAP_H\n+\n+#include <stddef.h>\n+#include <stdbool.h>\n+#include <string.h>\n+#include \"../GCTypes.h\"\n+#include \"../Constants.h\"\n+#include \"../Log.h\"\n+\n+typedef struct {\n+    word_t *firstAddress;\n+    size_t size;\n+    ubyte_t *end;\n+    ubyte_t data[0];\n+} Bytemap;"
  }
]