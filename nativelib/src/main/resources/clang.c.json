[
  {
    "id" : "5a858576-c058-4f02-bc47-97c19e49fac7",
    "prId" : 642,
    "comments" : [
      {
        "id" : "6ffe02fc-16c9-4086-a0e8-d61a590e1320",
        "parentId" : null,
        "author" : {
          "login" : "jonas",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/8417?u=fd2f29f433df62751b5690a1bddee04bb4627d21&v=4"
        },
        "body" : "A new type of Scala macro ;)",
        "createdAt" : "2017-04-18T04:39:58Z",
        "updatedAt" : "2017-06-01T20:47:30Z",
        "lastEditedBy" : {
          "login" : "jonas",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/8417?u=fd2f29f433df62751b5690a1bddee04bb4627d21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "df75fa01abb765be7ec3f642c3e9381c7937ef16",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,232 @@\n+/**\n+ * Run the following command to update Clang.scala:\n+ *\n+ *    $ clang -DSCALA -E nativelib/src/main/resources/clang.c \\\n+ *        | grep -v '^#' \\\n+ *        > nativelib/src/main/scala/scala/scalanative/runtime/bindgen/Clang.scala\n+ */\n+\n+// An incomplete list of enums. Not all of these are currently used.\n+// Each enum value is exposed to Scala using a C method.\n+#define ENUM_INFO(_) \\\n+  _(CXCursorKind, CXCursor_StructDecl) \\\n+  _(CXCursorKind, CXCursor_UnionDecl) \\\n+  _(CXCursorKind, CXCursor_EnumDecl) \\\n+  _(CXCursorKind, CXCursor_EnumConstantDecl) \\\n+  _(CXCursorKind, CXCursor_FunctionDecl) \\\n+  _(CXCursorKind, CXCursor_VarDecl) \\\n+  _(CXCursorKind, CXCursor_TypedefDecl) \\\n+  _(CXTranslationUnit_Flags, CXTranslationUnit_None) \\\n+  _(CXTranslationUnit_Flags, CXTranslationUnit_SkipFunctionBodies) \\\n+  _(CXChildVisitResult, CXChildVisit_Break) \\\n+  _(CXChildVisitResult, CXChildVisit_Continue) \\\n+  _(CXChildVisitResult, CXChildVisit_Recurse) \\\n+  _(CXTypeKind, CXType_Invalid) \\\n+  _(CXTypeKind, CXType_Unexposed) \\\n+  _(CXTypeKind, CXType_Void) \\\n+  _(CXTypeKind, CXType_Bool) \\\n+  _(CXTypeKind, CXType_Char_U) \\\n+  _(CXTypeKind, CXType_UChar) \\\n+  _(CXTypeKind, CXType_Char16) \\\n+  _(CXTypeKind, CXType_Char32) \\\n+  _(CXTypeKind, CXType_UShort) \\\n+  _(CXTypeKind, CXType_UInt) \\\n+  _(CXTypeKind, CXType_ULong) \\\n+  _(CXTypeKind, CXType_ULongLong) \\\n+  _(CXTypeKind, CXType_UInt128) \\\n+  _(CXTypeKind, CXType_Char_S) \\\n+  _(CXTypeKind, CXType_SChar) \\\n+  _(CXTypeKind, CXType_WChar) \\\n+  _(CXTypeKind, CXType_Short) \\\n+  _(CXTypeKind, CXType_Int) \\\n+  _(CXTypeKind, CXType_Long) \\\n+  _(CXTypeKind, CXType_LongLong) \\\n+  _(CXTypeKind, CXType_Int128) \\\n+  _(CXTypeKind, CXType_Float) \\\n+  _(CXTypeKind, CXType_Double) \\\n+  _(CXTypeKind, CXType_LongDouble) \\\n+  _(CXTypeKind, CXType_NullPtr) \\\n+  _(CXTypeKind, CXType_Overload) \\\n+  _(CXTypeKind, CXType_Dependent) \\\n+  _(CXTypeKind, CXType_ObjCId) \\\n+  _(CXTypeKind, CXType_ObjCClass) \\\n+  _(CXTypeKind, CXType_ObjCSel) \\\n+  _(CXTypeKind, CXType_Complex) \\\n+  _(CXTypeKind, CXType_Pointer) \\\n+  _(CXTypeKind, CXType_BlockPointer) \\\n+  _(CXTypeKind, CXType_LValueReference) \\\n+  _(CXTypeKind, CXType_RValueReference) \\\n+  _(CXTypeKind, CXType_Record) \\\n+  _(CXTypeKind, CXType_Enum) \\\n+  _(CXTypeKind, CXType_Typedef) \\\n+  _(CXTypeKind, CXType_ObjCInterface) \\\n+  _(CXTypeKind, CXType_ObjCObjectPointer) \\\n+  _(CXTypeKind, CXType_FunctionNoProto) \\\n+  _(CXTypeKind, CXType_FunctionProto) \\\n+  _(CXTypeKind, CXType_ConstantArray) \\\n+  _(CXTypeKind, CXType_Vector) \\\n+  _(CXTypeKind, CXType_IncompleteArray) \\\n+  _(CXTypeKind, CXType_VariableArray) \\\n+  _(CXTypeKind, CXType_DependentSizedArray) \\\n+  _(CXTypeKind, CXType_MemberPointer) \\\n+  _(CXTypeKind, CXType_Auto)\n+\n+// Wrappers for various getters.\n+// PRIMITIVE_ wraps methods returning primitive values\n+// COPY_ wraps methods returning structs by value.\n+// STRING_ wraps methods returning CXStrings.\n+#define GETTER_INFO(PRIMITIVE_, COPY_, STRING_) \\\n+  PRIMITIVE_(CXCursorKind, getCursorKind, CXCursor, *cursor) \\\n+  PRIMITIVE_(CInt, Cursor_getNumArguments, CXCursor, *cursor) \\\n+  PRIMITIVE_(CLongLong, getEnumConstantDeclValue, CXCursor, *cursor) \\\n+  COPY_(CXType, getCursorType, CXCursor, *cursor) \\\n+  COPY_(CXType, getResultType, CXType, *tpe) \\\n+  COPY_(CXType, getEnumDeclIntegerType, CXCursor, *cursor) \\\n+  COPY_(CXType, getTypedefDeclUnderlyingType, CXCursor, *cursor) \\\n+  COPY_(CXCursor, getTranslationUnitCursor, CXTranslationUnit, unit) \\\n+  STRING_(getCursorKindSpelling, CXCursorKind, kind) \\\n+  STRING_(getCursorSpelling, CXCursor, *cursor) \\\n+  STRING_(getTypeSpelling, CXType, *tpe)\n+\n+#ifdef SCALA\n+// Auto-generated from nativelib/src/main/resources/clang.c - DO NOT EDIT\n+package scala.scalanative\n+package runtime\n+package bindgen\n+\n+import scalanative.native._\n+\n+#define EXTERN_FUNCTION0(symbol, id, tpe) @name(#symbol) def id(): tpe = extern;"
  },
  {
    "id" : "5b1e5d2f-92dc-4a72-92c4-cedd076a1ed8",
    "prId" : 642,
    "comments" : [
      {
        "id" : "f88ff665-83af-4cc8-920c-c7ffbf04dcc3",
        "parentId" : null,
        "author" : {
          "login" : "jonas",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/8417?u=fd2f29f433df62751b5690a1bddee04bb4627d21&v=4"
        },
        "body" : "FIXME: Move to Scala code",
        "createdAt" : "2017-04-18T04:40:41Z",
        "updatedAt" : "2017-06-01T20:47:30Z",
        "lastEditedBy" : {
          "login" : "jonas",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/8417?u=fd2f29f433df62751b5690a1bddee04bb4627d21&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "df75fa01abb765be7ec3f642c3e9381c7937ef16",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,232 @@\n+/**\n+ * Run the following command to update Clang.scala:\n+ *\n+ *    $ clang -DSCALA -E nativelib/src/main/resources/clang.c \\\n+ *        | grep -v '^#' \\\n+ *        > nativelib/src/main/scala/scala/scalanative/runtime/bindgen/Clang.scala\n+ */\n+\n+// An incomplete list of enums. Not all of these are currently used.\n+// Each enum value is exposed to Scala using a C method.\n+#define ENUM_INFO(_) \\\n+  _(CXCursorKind, CXCursor_StructDecl) \\\n+  _(CXCursorKind, CXCursor_UnionDecl) \\\n+  _(CXCursorKind, CXCursor_EnumDecl) \\\n+  _(CXCursorKind, CXCursor_EnumConstantDecl) \\\n+  _(CXCursorKind, CXCursor_FunctionDecl) \\\n+  _(CXCursorKind, CXCursor_VarDecl) \\\n+  _(CXCursorKind, CXCursor_TypedefDecl) \\\n+  _(CXTranslationUnit_Flags, CXTranslationUnit_None) \\\n+  _(CXTranslationUnit_Flags, CXTranslationUnit_SkipFunctionBodies) \\\n+  _(CXChildVisitResult, CXChildVisit_Break) \\\n+  _(CXChildVisitResult, CXChildVisit_Continue) \\\n+  _(CXChildVisitResult, CXChildVisit_Recurse) \\\n+  _(CXTypeKind, CXType_Invalid) \\\n+  _(CXTypeKind, CXType_Unexposed) \\\n+  _(CXTypeKind, CXType_Void) \\\n+  _(CXTypeKind, CXType_Bool) \\\n+  _(CXTypeKind, CXType_Char_U) \\\n+  _(CXTypeKind, CXType_UChar) \\\n+  _(CXTypeKind, CXType_Char16) \\\n+  _(CXTypeKind, CXType_Char32) \\\n+  _(CXTypeKind, CXType_UShort) \\\n+  _(CXTypeKind, CXType_UInt) \\\n+  _(CXTypeKind, CXType_ULong) \\\n+  _(CXTypeKind, CXType_ULongLong) \\\n+  _(CXTypeKind, CXType_UInt128) \\\n+  _(CXTypeKind, CXType_Char_S) \\\n+  _(CXTypeKind, CXType_SChar) \\\n+  _(CXTypeKind, CXType_WChar) \\\n+  _(CXTypeKind, CXType_Short) \\\n+  _(CXTypeKind, CXType_Int) \\\n+  _(CXTypeKind, CXType_Long) \\\n+  _(CXTypeKind, CXType_LongLong) \\\n+  _(CXTypeKind, CXType_Int128) \\\n+  _(CXTypeKind, CXType_Float) \\\n+  _(CXTypeKind, CXType_Double) \\\n+  _(CXTypeKind, CXType_LongDouble) \\\n+  _(CXTypeKind, CXType_NullPtr) \\\n+  _(CXTypeKind, CXType_Overload) \\\n+  _(CXTypeKind, CXType_Dependent) \\\n+  _(CXTypeKind, CXType_ObjCId) \\\n+  _(CXTypeKind, CXType_ObjCClass) \\\n+  _(CXTypeKind, CXType_ObjCSel) \\\n+  _(CXTypeKind, CXType_Complex) \\\n+  _(CXTypeKind, CXType_Pointer) \\\n+  _(CXTypeKind, CXType_BlockPointer) \\\n+  _(CXTypeKind, CXType_LValueReference) \\\n+  _(CXTypeKind, CXType_RValueReference) \\\n+  _(CXTypeKind, CXType_Record) \\\n+  _(CXTypeKind, CXType_Enum) \\\n+  _(CXTypeKind, CXType_Typedef) \\\n+  _(CXTypeKind, CXType_ObjCInterface) \\\n+  _(CXTypeKind, CXType_ObjCObjectPointer) \\\n+  _(CXTypeKind, CXType_FunctionNoProto) \\\n+  _(CXTypeKind, CXType_FunctionProto) \\\n+  _(CXTypeKind, CXType_ConstantArray) \\\n+  _(CXTypeKind, CXType_Vector) \\\n+  _(CXTypeKind, CXType_IncompleteArray) \\\n+  _(CXTypeKind, CXType_VariableArray) \\\n+  _(CXTypeKind, CXType_DependentSizedArray) \\\n+  _(CXTypeKind, CXType_MemberPointer) \\\n+  _(CXTypeKind, CXType_Auto)\n+\n+// Wrappers for various getters.\n+// PRIMITIVE_ wraps methods returning primitive values\n+// COPY_ wraps methods returning structs by value.\n+// STRING_ wraps methods returning CXStrings.\n+#define GETTER_INFO(PRIMITIVE_, COPY_, STRING_) \\\n+  PRIMITIVE_(CXCursorKind, getCursorKind, CXCursor, *cursor) \\\n+  PRIMITIVE_(CInt, Cursor_getNumArguments, CXCursor, *cursor) \\\n+  PRIMITIVE_(CLongLong, getEnumConstantDeclValue, CXCursor, *cursor) \\\n+  COPY_(CXType, getCursorType, CXCursor, *cursor) \\\n+  COPY_(CXType, getResultType, CXType, *tpe) \\\n+  COPY_(CXType, getEnumDeclIntegerType, CXCursor, *cursor) \\\n+  COPY_(CXType, getTypedefDeclUnderlyingType, CXCursor, *cursor) \\\n+  COPY_(CXCursor, getTranslationUnitCursor, CXTranslationUnit, unit) \\\n+  STRING_(getCursorKindSpelling, CXCursorKind, kind) \\\n+  STRING_(getCursorSpelling, CXCursor, *cursor) \\\n+  STRING_(getTypeSpelling, CXType, *tpe)\n+\n+#ifdef SCALA\n+// Auto-generated from nativelib/src/main/resources/clang.c - DO NOT EDIT\n+package scala.scalanative\n+package runtime\n+package bindgen\n+\n+import scalanative.native._\n+\n+#define EXTERN_FUNCTION0(symbol, id, tpe) @name(#symbol) def id(): tpe = extern;\n+#define EXTERN_FUNCTION1(symbol, id, tpe, argType, arg) \\\n+  @name(#symbol) def id(`arg`: argType): tpe = extern;\n+\n+#define DEFINE_ENUM(tpe, id) EXTERN_FUNCTION0(scalanative_clang_##id, id, tpe)\n+\n+#define PRIMITIVE_GETTER(tpe, name, argType, arg) \\\n+  EXTERN_FUNCTION1(scalanative_clang_##name, name, tpe, argType, arg)\n+\n+#define COPY_GETTER(tpe, name, argType, arg) \\\n+  EXTERN_FUNCTION1(scalanative_clang_##name, name, tpe, argType, arg)\n+\n+#define STRING_GETTER(name, argType, arg) \\\n+  EXTERN_FUNCTION1(scalanative_clang_##name, name, CString, argType, arg)\n+\n+@extern\n+@link(\"clang\")\n+object ClangAPI {\n+  type Data = Ptr[Byte]\n+  type CXIndex = Ptr[Byte]\n+  type CXCursor = Ptr[Byte]\n+  type CXType = Ptr[Byte]\n+  type CXTranslationUnit = Ptr[Byte]\n+  type CXUnsavedFile = Ptr[Byte]\n+  type Visitor = CFunctionPtr3[CXCursor, CXCursor, Data, UInt]\n+\n+  type CXCursorKind = UInt\n+  type CXTypeKind = UInt\n+  type CXTranslationUnit_Flags = UInt\n+  type CXChildVisitResult = UInt\n+  ENUM_INFO(DEFINE_ENUM)\n+\n+  GETTER_INFO(PRIMITIVE_GETTER, COPY_GETTER, STRING_GETTER)\n+\n+  @name(\"scalanative_clang_Cursor_getArgument\")\n+  def Cursor_getArgument(cursor: CXCursor, i: CInt): CXCursor = extern\n+\n+  @name(\"scalanative_clang_visitChildren\")\n+  def visitChildren(parent: CXCursor, visitor: Visitor, data: Data): UInt = extern\n+\n+  @name(\"clang_createIndex\")\n+  def createIndex(excludeDeclarationsFromPCH: CInt, displayDiagnostics: CInt): CXIndex = extern\n+\n+  @name(\"clang_disposeIndex\")\n+  def disposeIndex(index: CXIndex): Unit = extern\n+\n+  @name(\"clang_parseTranslationUnit\")\n+  def parseTranslationUnit(index: CXIndex, fileName: CString, argv: Ptr[CString], argc: CInt, unsavedFiles: CXUnsavedFile, numUnsavedFiles: CInt, options: UInt): CXTranslationUnit = extern\n+\n+  @name(\"clang_disposeTranslationUnit\")\n+  def disposeTranslationUnit(unit: CXTranslationUnit): Unit = extern\n+}\n+#endif\n+\n+#ifndef SCALA\n+#include <clang-c/Index.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+typedef enum CXCursorKind CXCursorKind;\n+typedef long long CLongLong;\n+typedef int CInt;\n+\n+#define DEFINE_ENUM(tpe, id) enum tpe scalanative_clang_##id() { return id; };\n+ENUM_INFO(DEFINE_ENUM)\n+\n+#define PRIMITIVE_GETTER(tpe, name, argType, arg) \\\n+  tpe \\\n+  scalanative_clang_##name(argType arg) \\\n+  { \\\n+    return clang_##name(arg); \\\n+  }\n+\n+#define COPY_GETTER(tpe, name, argType, arg) \\\n+  tpe * \\\n+  scalanative_clang_##name(argType arg) \\\n+  { \\\n+    tpe *copy = malloc(sizeof(tpe)); \\\n+    *copy = clang_##name(arg); \\\n+    return copy; \\\n+  }\n+\n+#define STRING_GETTER(name, argType, arg) \\\n+  const char * \\\n+  scalanative_clang_##name(argType arg) \\\n+  { \\\n+    CXString cxstring = clang_##name(arg); \\\n+    const char *string = strdup(clang_getCString(cxstring)); \\\n+    clang_disposeString(cxstring); \\\n+    return string; \\\n+  }\n+\n+GETTER_INFO(PRIMITIVE_GETTER, COPY_GETTER, STRING_GETTER)\n+\n+CXCursor *\n+scalanative_clang_Cursor_getArgument(CXCursor *cursor, int i)\n+{\n+  CXCursor *copy = malloc(sizeof(CXCursor));\n+  *copy = clang_Cursor_getArgument(*cursor, i);\n+  return copy;\n+}\n+\n+/*\n+ * Wrappers for the visitor API\n+ */\n+\n+typedef enum CXChildVisitResult (*bindgen_visitor)(CXCursor *cursor, CXCursor *parent, void *data);\n+\n+struct bindgen_context {\n+  bindgen_visitor visitor;\n+  void *data;\n+};\n+\n+static enum CXChildVisitResult\n+scalanative_clang_visit(CXCursor cursor, CXCursor parent, CXClientData data)\n+{\n+  struct bindgen_context *ctx = data;\n+\n+  CXSourceLocation location = clang_getCursorLocation(cursor);\n+  if (!clang_Location_isFromMainFile(location))"
  }
]