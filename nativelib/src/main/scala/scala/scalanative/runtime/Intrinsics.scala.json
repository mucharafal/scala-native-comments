[
  {
    "id" : "564c78e6-3b03-4628-bb6a-2caa69b2c37f",
    "prId" : 203,
    "comments" : [
      {
        "id" : "77f4c647-3bde-44f7-963a-27354a195cf9",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "It's really cool that we have those built-in. LLVM ❤️ \n",
        "createdAt" : "2016-06-26T18:30:00Z",
        "updatedAt" : "2016-06-27T11:41:14Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "cc5ac537282a550ff3e73d467af15f492923f0dc",
    "line" : 77,
    "diffHunk" : "@@ -8,65 +8,80 @@ import native._\n  */\n @extern\n object Intrinsics {\n-  def `llvm.sqrt.f32`(value: Float): Float                        = extern\n-  def `llvm.sqrt.f64`(value: Double): Double                      = extern\n-  def `llvm.powi.f32`(value: Float, power: Int): Float            = extern\n-  def `llvm.powi.f64`(value: Double, power: Int): Double          = extern\n-  def `llvm.sin.f32`(value: Float): Float                         = extern\n-  def `llvm.sin.f64`(value: Double): Double                       = extern\n-  def `llvm.cos.f32`(value: Float): Float                         = extern\n-  def `llvm.cos.f64`(value: Double): Double                       = extern\n-  def `llvm.pow.f32`(value: Float, power: Float): Float           = extern\n-  def `llvm.pow.f64`(value: Double, power: Double): Double        = extern\n-  def `llvm.exp.f32`(value: Float): Float                         = extern\n-  def `llvm.exp.f64`(value: Double): Double                       = extern\n-  def `llvm.exp2.f32`(value: Float): Float                        = extern\n-  def `llvm.exp2.f64`(value: Double): Double                      = extern\n-  def `llvm.log.f32`(value: Float): Float                         = extern\n-  def `llvm.log.f64`(value: Double): Double                       = extern\n-  def `llvm.log10.f32`(value: Float): Float                       = extern\n-  def `llvm.log10.f64`(value: Double): Double                     = extern\n-  def `llvm.log2.f32`(value: Float): Float                        = extern\n-  def `llvm.log2.f64`(value: Double): Double                      = extern\n-  def `llvm.fma.f32`(a: Float, b: Float, c: Float): Float         = extern\n-  def `llvm.fma.f64`(a: Double, b: Double, c: Double): Double     = extern\n-  def `llvm.fabs.f32`(value: Float): Float                        = extern\n-  def `llvm.fabs.f64`(value: Double): Double                      = extern\n-  def `llvm.minnum.f32`(left: Float, right: Float): Float         = extern\n-  def `llvm.minnum.f64`(left: Double, right: Double): Double      = extern\n-  def `llvm.maxnum.f32`(left: Float, right: Float): Float         = extern\n-  def `llvm.maxnum.f64`(left: Double, right: Double): Double      = extern\n-  def `llvm.copysign.f32`(magn: Float, sgn: Float): Float         = extern\n-  def `llvm.copysign.f64`(magn: Double, sgn: Double): Double      = extern\n-  def `llvm.floor.f32`(value: Float): Float                       = extern\n-  def `llvm.floor.f64`(value: Double): Double                     = extern\n-  def `llvm.ceil.f32`(value: Float): Float                        = extern\n-  def `llvm.ceil.f64`(value: Double): Double                      = extern\n-  def `llvm.trunc.f32`(value: Float): Float                       = extern\n-  def `llvm.trunc.f64`(value: Double): Double                     = extern\n-  def `llvm.rint.f32`(value: Float): Float                        = extern\n-  def `llvm.rint.f64`(value: Double): Double                      = extern\n-  def `llvm.nearbyint.f32`(value: Float): Float                   = extern\n-  def `llvm.nearbyint.f64`(value: Double): Double                 = extern\n-  def `llvm.round.f32`(value: Float): Float                       = extern\n-  def `llvm.round.f64`(value: Double): Double                     = extern\n-  def `llvm.bitreverse.i16`(value: Short): Short                  = extern\n-  def `llvm.bitreverse.i32`(value: Int): Int                      = extern\n-  def `llvm.bitreverse.i64`(value: Long): Long                    = extern\n-  def `llvm.bswap.i16`(value: Short): Short                       = extern\n-  def `llvm.bswap.i32`(value: Int): Int                           = extern\n-  def `llvm.bswap.i64`(value: Long): Long                         = extern\n-  def `llvm.ctpop.i16`(value: Short): Short                       = extern\n-  def `llvm.ctpop.i32`(value: Int): Int                           = extern\n-  def `llvm.ctpop.i64`(value: Long): Long                         = extern\n-  def `llvm.ctlz.i8`(source: Byte, iszeroundef: Boolean): Byte    = extern\n-  def `llvm.ctlz.i16`(source: Short, iszeroundef: Boolean): Short = extern\n-  def `llvm.ctlz.i32`(source: Int, iszeroundef: Boolean): Int     = extern\n-  def `llvm.ctlz.i64`(source: Long, iszeroundef: Boolean): Long   = extern\n-  def `llvm.cttz.i8`(source: Byte, iszeroundef: Boolean): Byte    = extern\n-  def `llvm.cttz.i16`(source: Short, iszeroundef: Boolean): Short = extern\n-  def `llvm.cttz.i32`(source: Int, iszeroundef: Boolean): Int     = extern\n-  def `llvm.cttz.i64`(source: Long, iszeroundef: Boolean): Long   = extern\n+  @struct class IntOverflow(val value: Int, val flag: Boolean)\n+  @struct class LongOverflow(val value: Long, val flag: Boolean)\n+\n+  def `llvm.sadd.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.sadd.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern\n+  def `llvm.uadd.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.uadd.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern\n+  def `llvm.ssub.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.ssub.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern\n+  def `llvm.usub.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.usub.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern\n+  def `llvm.smul.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.smul.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern\n+  def `llvm.umul.with.overflow.i32`(a: Int, b: Int): IntOverflow    = extern\n+  def `llvm.umul.with.overflow.i64`(a: Long, b: Long): LongOverflow = extern"
  },
  {
    "id" : "a18071ac-8984-461e-b8fb-8feff174c12e",
    "prId" : 1422,
    "comments" : [
      {
        "id" : "920b4e3e-c54a-4eb3-aae9-35f4a1c741e1",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "A curious reader might observe that this API maps very closely to memory operations in [`sun.misc.Unsafe`](http://www.docjar.com/docs/api/sun/misc/Unsafe.html) (i.e., you can implement it with `sun.misc.Unsafe` and vise versa).",
        "createdAt" : "2019-01-17T12:52:55Z",
        "updatedAt" : "2019-01-18T11:53:25Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8a868fde3ea4f25e28d060e9130528c68ffd96ac",
    "line" : 96,
    "diffHunk" : "@@ -29,4 +29,97 @@ object Intrinsics {\n \n   /** Intrinsified int to unsigned long conversion. */\n   def intToULong(v: Int): Long = intrinsic\n+\n+  /** Intrinsified raw memory load of boolean. */\n+  def loadBoolean(rawptr: RawPtr): Boolean = intrinsic\n+\n+  /** Intrinsified raw memory load of char. */\n+  def loadChar(rawptr: RawPtr): Char = intrinsic\n+\n+  /** Intrinsified raw memory load of byte. */\n+  def loadByte(rawptr: RawPtr): Byte = intrinsic\n+\n+  /** Intrinsified raw memory load of short. */\n+  def loadShort(rawptr: RawPtr): Short = intrinsic\n+\n+  /** Intrinsified raw memory load of int. */\n+  def loadInt(rawptr: RawPtr): Int = intrinsic\n+\n+  /** Intrinsified raw memory load of long. */\n+  def loadLong(rawptr: RawPtr): Long = intrinsic\n+\n+  /** Intrinsified raw memory load of float. */\n+  def loadFloat(rawptr: RawPtr): Float = intrinsic\n+\n+  /** Intrinsified raw memory load of double. */\n+  def loadDouble(rawptr: RawPtr): Double = intrinsic\n+\n+  /** Intrinsified raw memory load of rawptr. */\n+  def loadRawPtr(rawptr: RawPtr): RawPtr = intrinsic\n+\n+  /** Intrinsified raw memory load of object. */\n+  def loadObject(rawptr: RawPtr): Object = intrinsic\n+\n+  /** Intrinsified raw memory store of boolean. */\n+  def storeBoolean(rawptr: RawPtr, value: Boolean): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of char. */\n+  def storeChar(rawptr: RawPtr, value: Char): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of byte. */\n+  def storeByte(rawptr: RawPtr, value: Byte): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of short. */\n+  def storeShort(rawptr: RawPtr, value: Short): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of int. */\n+  def storeInt(rawptr: RawPtr, value: Int): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of long. */\n+  def storeLong(rawptr: RawPtr, value: Long): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of float. */\n+  def storeFloat(rawptr: RawPtr, value: Float): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of double. */\n+  def storeDouble(rawptr: RawPtr, value: Double): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of rawptr. */\n+  def storeRawPtr(rawptr: RawPtr, value: RawPtr): Unit = intrinsic\n+\n+  /** Intrinsified raw memory store of object. */\n+  def storeObject(rawptr: RawPtr, value: Object): Unit = intrinsic\n+\n+  /** Intrinsified computation of derived raw pointer. */\n+  def elemRawPtr(rawptr: RawPtr, offset: Long): RawPtr = intrinsic\n+\n+  /** Intrinsified cast that reinterprets raw pointer as an object. */\n+  def castRawPtrToObject(rawptr: RawPtr): Object = intrinsic\n+\n+  /** Intrinsified cast that reinterprets object as a raw pointers. */\n+  def castObjectToRawPtr(obj: Object): RawPtr = intrinsic\n+\n+  /** Intrinsified cast that reinterprets int as a float. */\n+  def castIntToFloat(int: Int): Float = intrinsic\n+\n+  /** Intrinsified cast that reinterprets float as an int. */\n+  def castFloatToInt(float: Float): Int = intrinsic\n+\n+  /** Intrinsified cast that reinterprets long as a double. */\n+  def castLongToDouble(long: Long): Double = intrinsic\n+\n+  /** Intrinsified cast that reinterprets double as a long. */\n+  def castDoubleToLong(double: Double): Long = intrinsic\n+\n+  /** Intrinsified cast that reinterprets raw pointer as an int. */\n+  def castRawPtrToInt(rawptr: RawPtr): Int = intrinsic\n+\n+  /** Intrinsified cast that reinterprets raw pointer as an long. */\n+  def castRawPtrToLong(rawptr: RawPtr): Long = intrinsic\n+\n+  /** Intrinsified cast that reinterprets int as a raw pointer. */\n+  def castIntToRawPtr(int: Int): RawPtr = intrinsic\n+\n+  /** Intrinsified cast that reinterprets long as a raw pointer. */\n+  def castLongToRawPtr(int: Long): RawPtr = intrinsic"
  },
  {
    "id" : "4aecffe1-2fb3-4f1e-8950-b38e00584936",
    "prId" : 1571,
    "comments" : [
      {
        "id" : "a81fab39-3416-4c2b-a4ad-66f39b7adfa4",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Needs simple comments similarly to the ones above. ",
        "createdAt" : "2019-04-29T12:48:53Z",
        "updatedAt" : "2019-07-10T01:12:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b93fe8c0ba93c2c90ed65ad7e765ba53a5a1854c",
    "line" : 84,
    "diffHunk" : "@@ -134,4 +140,15 @@ object Intrinsics {\n \n   /** Intrinsified cast that reinterprets long as a raw pointer. */\n   def castLongToRawPtr(int: Long): RawPtr = intrinsic\n+\n+  def castRawWordToInt(rawWord: RawWord): Int   = intrinsic\n+  def castRawWordToLong(rawWord: RawWord): Long = intrinsic\n+  def castIntToRawWord(int: Int): RawWord       = intrinsic\n+  def castLongToRawWord(long: Long): RawWord    = intrinsic\n+\n+  def addRawWords(a: RawWord, b: RawWord): RawWord         = intrinsic\n+  def subRawWords(a: RawWord, b: RawWord): RawWord         = intrinsic\n+  def multRawWords(a: RawWord, b: RawWord): RawWord        = intrinsic\n+  def divRawWords(a: RawWord, b: RawWord): RawWord         = intrinsic\n+  def divRawWordsUnsigned(a: RawWord, b: RawWord): RawWord = intrinsic"
  },
  {
    "id" : "73a47eed-77ba-4b19-b63f-4540c52a4aad",
    "prId" : 1571,
    "comments" : [
      {
        "id" : "9d347435-cfe3-4de9-b5ff-8a7938114e38",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Group with previous casts here too.",
        "createdAt" : "2019-05-28T09:09:17Z",
        "updatedAt" : "2019-07-10T01:12:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b93fe8c0ba93c2c90ed65ad7e765ba53a5a1854c",
    "line" : 57,
    "diffHunk" : "@@ -141,4 +146,43 @@ object Intrinsics {\n \n   /** Resolve c-friendly forwarder generated for given CFuncPtr. */\n   def resolveCFuncPtr(cfuncptr: CFuncPtr): RawPtr = intrinsic\n+\n+  /** Intrinsified cast that reinterprets raw word as an int. */\n+  def castRawWordToInt(rawWord: RawWord): Int = intrinsic\n+\n+  /** Intrinsified cast that reinterprets raw word as a long. */\n+  def castRawWordToLong(rawWord: RawWord): Long = intrinsic\n+\n+  /** Intrinsified cast that reinterprets int as a raw word. */\n+  def castIntToRawWord(int: Int): RawWord = intrinsic\n+\n+  /** Intrinsified cast that reinterprets long as a raw word. */\n+  def castLongToRawWord(long: Long): RawWord = intrinsic"
  },
  {
    "id" : "8a8d5c75-87f9-4b34-bf47-ab1397b7564a",
    "prId" : 1571,
    "comments" : [
      {
        "id" : "1e609ff0-6557-44a7-a74c-8028cfb83a90",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "I'd put TODO in a dedicated issue or a checklist on the PR. TODOs in the code don't age well and we don't use them at all. ",
        "createdAt" : "2019-05-28T09:09:56Z",
        "updatedAt" : "2019-07-10T01:12:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b93fe8c0ba93c2c90ed65ad7e765ba53a5a1854c",
    "line" : null,
    "diffHunk" : "@@ -107,7 +111,8 @@ object Intrinsics {\n   def storeObject(rawptr: RawPtr, value: Object): Unit = intrinsic\n \n   /** Intrinsified computation of derived raw pointer. */\n-  def elemRawPtr(rawptr: RawPtr, offset: Long): RawPtr = intrinsic\n+  def elemRawPtr(rawptr: RawPtr, offset: Long): RawPtr =\n+    intrinsic // TODO(shadaj): word offset"
  },
  {
    "id" : "6866bf7b-79cf-4f41-a1a9-5e2198b80429",
    "prId" : 1571,
    "comments" : [
      {
        "id" : "c2be3a1f-8a4d-45c7-b856-9102a9917f08",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Same comment on TODO.",
        "createdAt" : "2019-05-28T09:10:14Z",
        "updatedAt" : "2019-07-10T01:12:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "b93fe8c0ba93c2c90ed65ad7e765ba53a5a1854c",
    "line" : null,
    "diffHunk" : "@@ -6,7 +6,7 @@ import scalanative.unsafe.CFuncPtr\n object Intrinsics {\n \n   /** Intrinsified stack allocation of n bytes. */\n-  def stackalloc(size: Long): RawPtr = intrinsic\n+  def stackalloc(size: Long): RawPtr = intrinsic // TODO(shadaj): take a word"
  }
]