[
  {
    "id" : "ba6ddc97-819b-45cc-b500-d8f4ee101371",
    "prId" : 588,
    "comments" : [
      {
        "id" : "6f609292-4ece-4698-b607-34c5e8594537",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Tests with empty bodies are not testing anything and should be removed.",
        "createdAt" : "2017-04-05T14:04:43Z",
        "updatedAt" : "2017-04-10T19:25:45Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9caf539c0c1bdd8069a9390cdef87fdd4a4a17b8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,162 @@\n+package java.util\n+package regex\n+\n+/*\n+Tests are inspired by those projects under Apache2 License:\n+j2objc: https://github.com/google/j2objc/blob/master/jre_emul/Tests/java/util/regex/MatcherTest.java#L1\n+re2: https://github.com/google/re2/blob/master/re2/testing/re2_test.cc\n+ */\n+object MatcherSuite extends tests.Suite {\n+  test(\"quoteReplacement\") {\n+    assertEquals(\n+      Matcher.quoteReplacement(\"\"),\n+      \"\"\n+    )\n+  }\n+\n+  private def matcher(regex: String, text: String): Matcher =\n+    Pattern.compile(regex).matcher(text)\n+\n+  test(\"match\") {\n+    val m = matcher(\"foo\", \"foobar\")\n+    assert(!m.matches())\n+  }\n+\n+  test(\"replaceAll\") {\n+    assertEquals(\n+      matcher(\"abc\", \"abcabcabc\").replaceAll(\"z\"),\n+      \"zzz\"\n+    )\n+  }\n+\n+  test(\"replaceFirst\") {\n+    assertEquals(\n+      matcher(\"abc\", \"abcabcabc\").replaceFirst(\"z\"),\n+      \"zabcabc\"\n+    )\n+  }\n+\n+  test(\"group\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assertEquals(groupCount, 2)\n+\n+    assert(find())\n+    assertEquals(group(0), \"a12z\")\n+    assertEquals(group(1), \"1\")\n+    assertEquals(group(2), \"2\")\n+\n+    assert(find())\n+    assertEquals(group(0), \"a34z\")\n+    assertEquals(group(1), \"3\")\n+    assertEquals(group(2), \"4\")\n+\n+    assert(!find())\n+  }\n+\n+  test(\"named group\") {\n+    // TODO change pattern to java: \"from (?<S>.*) to (?<D>.*)\"\n+    val m = matcher(\n+      \"from (?P<S>.*) to (?P<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(group(\"S\"), \"Montreal, Canada\")\n+    assertEquals(group(\"D\"), \"Lausanne, Switzerland\")\n+  }\n+\n+  test(\"start(i)/end(i)\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"012345_a12z_012345\")\n+    import m._\n+\n+    assert(find())\n+\n+    assertEquals(start, 7)\n+    assertEquals(end, 11)\n+\n+    assertEquals(start(0), 7)\n+    assertEquals(end(0), 11)\n+\n+    assertEquals(start(1), 8)\n+    assertEquals(end(1), 9)\n+\n+    assertEquals(start(2), 9)\n+    assertEquals(end(2), 10)\n+  }\n+\n+  test(\"start/end\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    assert(find())\n+    assertEquals(start, 6)\n+    assertEquals(end, 10)\n+\n+    assert(!find())\n+  }\n+\n+  test(\"start(name)/end(name)\") {\n+    // TODO change pattern to java: \"from (?<S>.*) to (?<D>.*)\"\n+    val m = matcher(\n+      \"from (?P<S>.*) to (?P<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start(\"S\"), 5)\n+    assertEquals(end(\"S\"), 21)\n+\n+    assertEquals(start(\"D\"), 25)\n+    assertEquals(end(\"D\"), 46)\n+  }\n+\n+  test(\"appendReplacement/appendTail\") {\n+    val buf = new StringBuffer()\n+\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    while (find()) {\n+      appendReplacement(buf, \"{\" + group + \"}\")\n+    }\n+    appendTail(buf)\n+    assertEquals(buf.toString, \"_{a12z}_{a34z}_\")\n+  }\n+\n+  test(\"reset\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    reset()\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    assert(find())\n+    assertEquals(start, 6)\n+    assertEquals(end, 10)\n+\n+    assert(!find())\n+  }\n+\n+  // we don't support lookahead\n+  test(\"(not supported) hasTransparentBounds/useTransparentBounds\") {}"
  },
  {
    "id" : "50c2ebac-b347-4d73-b5b5-108b584a3d69",
    "prId" : 588,
    "comments" : [
      {
        "id" : "7226c347-96aa-47d1-940e-60fe42f1c1fb",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Scala.js doesn't support `useTransparentBounds` either (`hasTransparentBounds` always returns `false`), however it does support lookaheads (but not lookbehinds). I'm not sure whether the comment is related to the test. Is it the only test with lokaheads?",
        "createdAt" : "2017-04-10T13:15:36Z",
        "updatedAt" : "2017-04-10T19:25:45Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "4fb30162-7727-4f54-89b5-2639b1520656",
        "parentId" : "7226c347-96aa-47d1-940e-60fe42f1c1fb",
        "author" : {
          "login" : "MasseGuillaume",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "body" : "https://github.com/scala-native/scala-native/pull/588/files#diff-757ea147c63282af70739a2d6d8e80f7R269\r\n\r\n",
        "createdAt" : "2017-04-10T15:07:58Z",
        "updatedAt" : "2017-04-10T19:25:45Z",
        "lastEditedBy" : {
          "login" : "MasseGuillaume",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "cb7f4978-7a8a-4a5d-90ec-8537c0540db7",
        "parentId" : "7226c347-96aa-47d1-940e-60fe42f1c1fb",
        "author" : {
          "login" : "MasseGuillaume",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "body" : "With an opaque bound, it will not match the lookaheads. I think you can add useTransparentBounds to Scala.js.",
        "createdAt" : "2017-04-10T15:10:25Z",
        "updatedAt" : "2017-04-10T19:25:45Z",
        "lastEditedBy" : {
          "login" : "MasseGuillaume",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "9caf539c0c1bdd8069a9390cdef87fdd4a4a17b8",
    "line" : 245,
    "diffHunk" : "@@ -0,0 +1,279 @@\n+package java.util\n+package regex\n+\n+/*\n+Tests are inspired by those projects under Apache2 License:\n+j2objc: https://github.com/google/j2objc/blob/master/jre_emul/Tests/java/util/regex/MatcherTest.java#L1\n+re2: https://github.com/google/re2/blob/master/re2/testing/re2_test.cc\n+ */\n+object MatcherSuite extends tests.Suite {\n+  test(\"quoteReplacement\") {\n+    assertEquals(\n+      Matcher.quoteReplacement(\"\"),\n+      \"\"\n+    )\n+  }\n+\n+  test(\"match\") {\n+    val m = matcher(\"foo\", \"foobar\")\n+    assert(!m.matches())\n+  }\n+\n+  test(\"replaceAll\") {\n+    assertEquals(\n+      matcher(\"abc\", \"abcabcabc\").replaceAll(\"z\"),\n+      \"zzz\"\n+    )\n+  }\n+\n+  test(\"replaceFirst\") {\n+    assertEquals(\n+      matcher(\"abc\", \"abcabcabc\").replaceFirst(\"z\"),\n+      \"zabcabc\"\n+    )\n+  }\n+\n+  test(\"group\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assertEquals(groupCount, 2)\n+\n+    assertThrows2[IllegalStateException](group,\n+                                         _.getMessage == \"No match found\")\n+\n+    assert(find())\n+    assertEquals(group, \"a12z\")\n+    assertEquals(group(0), \"a12z\")\n+    assertEquals(group(1), \"1\")\n+    assertEquals(group(2), \"2\")\n+    assertThrows2[IndexOutOfBoundsException](group(42),\n+                                             _.getMessage == \"No group 42\")\n+\n+    assert(find())\n+    assertEquals(group, \"a34z\")\n+    assertEquals(group(0), \"a34z\")\n+    assertEquals(group(1), \"3\")\n+    assertEquals(group(2), \"4\")\n+\n+    assert(!find())\n+  }\n+\n+  test(\"named group (re2 syntax)\") {\n+    // change pattern to java: \"from (?<S>.*) to (?<D>.*)\"\n+    val m = matcher(\n+      \"from (?P<S>.*) to (?P<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(group(\"S\"), \"Montreal, Canada\")\n+    assertEquals(group(\"D\"), \"Lausanne, Switzerland\")\n+    assertThrows2[IllegalArgumentException](\n+      group(\"foo\"),\n+      _.getMessage == \"No group with name <foo>\"\n+    )\n+  }\n+\n+  testFails(\"named group (java syntax)\", 620) {\n+    val m = matcher(\n+      \"from (?<S>.*) to (?<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(group(\"S\"), \"Montreal, Canada\")\n+    assertEquals(group(\"D\"), \"Lausanne, Switzerland\")\n+  }\n+\n+  test(\"start(i)/end(i)\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"012345_a12z_012345\")\n+    import m._\n+\n+    assertThrows2[IllegalStateException](\n+      start,\n+      _.getMessage == \"No match found\"\n+    )\n+\n+    assertThrows2[IllegalStateException](\n+      end,\n+      _.getMessage == \"No match found\"\n+    )\n+\n+    assert(find())\n+\n+    assertEquals(start, 7)\n+    assertEquals(end, 11)\n+\n+    assertEquals(start(0), 7)\n+    assertEquals(end(0), 11)\n+\n+    assertEquals(start(1), 8)\n+    assertEquals(end(1), 9)\n+\n+    assertEquals(start(2), 9)\n+    assertEquals(end(2), 10)\n+\n+    assertThrows2[IndexOutOfBoundsException](\n+      start(42),\n+      _.getMessage == \"No group 42\"\n+    )\n+\n+    assertThrows2[IndexOutOfBoundsException](\n+      end(42),\n+      _.getMessage == \"No group 42\"\n+    )\n+  }\n+\n+  test(\"start/end\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    assert(find())\n+    assertEquals(start, 6)\n+    assertEquals(end, 10)\n+\n+    assert(!find())\n+  }\n+\n+  test(\"start(name)/end(name) re2 syntax\") {\n+    val m = matcher(\n+      \"from (?P<S>.*) to (?P<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start(\"S\"), 5)\n+    assertEquals(end(\"S\"), 21)\n+\n+    assertEquals(start(\"D\"), 25)\n+    assertEquals(end(\"D\"), 46)\n+\n+    assertThrows2[IllegalArgumentException](\n+      start(\"foo\"),\n+      _.getMessage == \"No group with name <foo>\"\n+    )\n+\n+    assertThrows2[IllegalArgumentException](\n+      end(\"foo\"),\n+      _.getMessage == \"No group with name <foo>\"\n+    )\n+  }\n+\n+  testFails(\"start(name)/end(name) java syntax\", 620) {\n+    // change pattern to java: \"from (?<S>.*) to (?<D>.*)\"\n+    val m = matcher(\n+      \"from (?<S>.*) to (?<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start(\"S\"), 5)\n+    assertEquals(end(\"S\"), 21)\n+\n+    assertEquals(start(\"D\"), 25)\n+    assertEquals(end(\"D\"), 46)\n+  }\n+\n+  test(\"appendReplacement/appendTail\") {\n+    val buf = new StringBuffer()\n+\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    while (find()) {\n+      appendReplacement(buf, \"{\" + group + \"}\")\n+    }\n+    appendTail(buf)\n+    assertEquals(buf.toString, \"_{a12z}_{a34z}_\")\n+  }\n+\n+  test(\"appendReplacement/appendTail with group replacement by index\") {\n+    val buf = new StringBuffer()\n+\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    while (find()) {\n+      appendReplacement(buf, \"{$0}\")\n+    }\n+    appendTail(buf)\n+    assertEquals(buf.toString, \"_{a12z}_{a34z}_\")\n+  }\n+\n+  test(\"appendReplacement/appendTail with group replacement by name\") {\n+    val buf = new StringBuffer()\n+\n+    val m = matcher(\n+      \"from (?P<S>.*) to (?P<D>.*)\",\n+      \"from Montreal, Canada to Lausanne, Switzerland\"\n+    )\n+    import m._\n+\n+    while (find()) {\n+      appendReplacement(buf, \"such ${S}, wow ${D}\")\n+    }\n+    appendTail(buf)\n+    assertEquals(buf.toString,\n+                 \"such Montreal, Canada, wow Lausanne, Switzerland\")\n+  }\n+\n+  test(\"reset\") {\n+    val m = matcher(\"a(\\\\d)(\\\\d)z\", \"_a12z_a34z_\")\n+    import m._\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    reset()\n+\n+    assert(find())\n+    assertEquals(start, 1)\n+    assertEquals(end, 5)\n+\n+    assert(find())\n+    assertEquals(start, 6)\n+    assertEquals(end, 10)\n+\n+    assert(!find())\n+  }\n+\n+  // we don't support lookahead\n+  testFails(\"(not supported) hasTransparentBounds/useTransparentBounds\", 640) {"
  },
  {
    "id" : "afbc7236-741c-486b-b4af-65f79687d48c",
    "prId" : 588,
    "comments" : [
      {
        "id" : "6d1d99fb-3cac-4709-87b0-f5758e33cbd9",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Given that this is not a doc comments, lets use `//` instead here. ",
        "createdAt" : "2017-04-10T16:45:30Z",
        "updatedAt" : "2017-04-10T19:25:45Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "9caf539c0c1bdd8069a9390cdef87fdd4a4a17b8",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,274 @@\n+package java.util\n+package regex\n+\n+/*\n+Tests are inspired by those projects under Apache2 License:\n+j2objc: https://github.com/google/j2objc/blob/master/jre_emul/Tests/java/util/regex/MatcherTest.java#L1\n+re2: https://github.com/google/re2/blob/master/re2/testing/re2_test.cc\n+ */"
  }
]