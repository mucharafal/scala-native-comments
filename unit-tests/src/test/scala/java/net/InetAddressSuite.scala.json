[
  {
    "id" : "565beba6-cbdb-42c9-9f3b-9654b60daa33",
    "prId" : 807,
    "comments" : [
      {
        "id" : "82fc29fe-3fdb-495b-b94a-5a5d4248643c",
        "parentId" : null,
        "author" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "body" : "This comment is out of date, isn't it? You have a scripted test for it now.",
        "createdAt" : "2017-07-24T08:01:04Z",
        "updatedAt" : "2017-08-04T10:45:20Z",
        "lastEditedBy" : {
          "login" : "Duhemm",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1765926?u=025ccd7d65512bc68d5a0b24bb857dabd6dd381d&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "3bf12b7a41b57ce5f8a25bbe8a14636f4eddbe70",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,158 @@\n+package java.net\n+\n+// Ported from Apache Harmony\n+object InetAddressSuite extends tests.Suite {\n+\n+  test(\"equals should work on localhosts from getByName\") {\n+    val ia1 = InetAddress.getByName(\"127.1\")\n+    val ia2 = InetAddress.getByName(\"127.0.0.1\")\n+    assertEquals(ia1, ia2)\n+  }\n+\n+  test(\"getAddress\") {\n+    try {\n+      val ia    = InetAddress.getByName(\"127.0.0.1\")\n+      val caddr = Array[Byte](127.toByte, 0.toByte, 0.toByte, 1.toByte)\n+      val addr  = ia.getAddress()\n+      for (i <- addr.indices)\n+        assertEquals(caddr(i), addr(i))\n+    } catch {\n+      case e: UnknownHostException => {}\n+    }\n+\n+    val origBytes = Array[Byte](0.toByte, 1.toByte, 2.toByte, 3.toByte)\n+    val address   = InetAddress.getByAddress(origBytes)\n+    origBytes(0) = -1\n+    val newBytes = address.getAddress()\n+    assertEquals(newBytes(0), 0.toByte)\n+  }\n+\n+  test(\"getAllByName\") {\n+    val all = InetAddress.getAllByName(\"localhost\")\n+    assertNot(all == null)\n+    assert(all.length >= 1)\n+\n+    for (alias <- all)\n+      assert(alias.getHostName().startsWith(\"localhost\"))\n+\n+    val ias = InetAddress.getAllByName(null)\n+    for (ia <- ias)\n+      assert(ia.isLoopbackAddress())\n+\n+    val ias2 = InetAddress.getAllByName(\"\")\n+    for (ia <- ias2)\n+      assert(ia.isLoopbackAddress())\n+\n+    // Check that getting addresses by dotted string distingush IPv4 and IPv6 subtypes\n+    val list = InetAddress.getAllByName(\"192.168.0.1\")\n+    for (addr <- list)\n+      assertNot(addr.getClass == classOf[InetAddress])\n+\n+  }\n+\n+  test(\"getByName\") {\n+    val ia = InetAddress.getByName(\"127.0.0.1\")\n+\n+    val i1 = InetAddress.getByName(\"1.2.3\")\n+    assertEquals(\"1.2.0.3\", i1.getHostAddress())\n+\n+    val i2 = InetAddress.getByName(\"1.2\")\n+    assertEquals(\"1.0.0.2\", i2.getHostAddress())\n+\n+    val i3 = InetAddress.getByName(String.valueOf(0xffffffffL))\n+    assertEquals(\"255.255.255.255\", i3.getHostAddress())\n+  }\n+\n+  test(\"getHostAddress\") {\n+    assertEquals(\"1.3.0.4\", InetAddress.getByName(\"1.3.4\").getHostAddress())\n+    assertEquals(\"0:0:0:0:0:0:0:1\",\n+                 InetAddress.getByName(\"::1\").getHostAddress())\n+  }\n+\n+  test(\"isReachable\") {\n+    // Linux disables ICMP requests by default and most of the addresses\n+    // don't have echo servers running on port 7, so it's quite difficult\n+    // to test this method"
  }
]