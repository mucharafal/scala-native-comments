[
  {
    "id" : "e772a2c2-8e6a-4a39-800a-c0400eb2c059",
    "prId" : 1444,
    "comments" : [
      {
        "id" : "9e15be7e-fa0e-48cc-bc3b-0699fccd378d",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "@sjrd It would be great if you could give it a brief look in case anything looks obviously wrong. ",
        "createdAt" : "2019-03-01T13:09:01Z",
        "updatedAt" : "2019-03-04T13:02:25Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "fb46ea2d58369c9eee6e40a1457001c347c98bd7",
    "line" : 12,
    "diffHunk" : "@@ -0,0 +1,615 @@\n+package scala.scalanative\n+package interflow\n+\n+import scalanative.nir._\n+import scalanative.linker._\n+import scalanative.util.{unreachable, And}\n+import nir.Bin.{And => Iand, _}\n+import nir.Comp._\n+import nir.Conv._\n+\n+trait Combine { self: Interflow =>"
  },
  {
    "id" : "0a4f42c4-4c5e-4eb2-964c-4975fcec2042",
    "prId" : 1444,
    "comments" : [
      {
        "id" : "4458a23e-3301-4fa8-b8d6-6703ab3b1024",
        "parentId" : null,
        "author" : {
          "login" : "tarsa",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1282159?u=2d1c32eccb34254bdf49f31456c7667e5a0c7750&v=4"
        },
        "body" : "That will return `true` for `Long.MinValue`, but `false` for any other negative Long value.",
        "createdAt" : "2019-03-01T20:44:52Z",
        "updatedAt" : "2019-03-04T13:02:25Z",
        "lastEditedBy" : {
          "login" : "tarsa",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1282159?u=2d1c32eccb34254bdf49f31456c7667e5a0c7750&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "23c7c4fb-1584-4b4f-902f-383cff39d539",
        "parentId" : "4458a23e-3301-4fa8-b8d6-6703ab3b1024",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Yep, it matches but the optimization that uses it still works even on min value. I renamed the helper method to be more explicit that it also matches min value.",
        "createdAt" : "2019-03-04T12:09:01Z",
        "updatedAt" : "2019-03-04T13:02:25Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "6528ddb8-87a4-4a9e-9e0f-70becf403111",
        "parentId" : "4458a23e-3301-4fa8-b8d6-6703ab3b1024",
        "author" : {
          "login" : "tarsa",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1282159?u=2d1c32eccb34254bdf49f31456c7667e5a0c7750&v=4"
        },
        "body" : "java.lang.Math contains methods that end with `Unsigned` but take normal longs and ints. With such convention the name of above function would be `isPowerOfTwoUnsigned`. Would that fit? I'm not sure if it makes sense in this case, though.",
        "createdAt" : "2019-03-05T09:04:46Z",
        "updatedAt" : "2019-03-05T09:06:11Z",
        "lastEditedBy" : {
          "login" : "tarsa",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1282159?u=2d1c32eccb34254bdf49f31456c7667e5a0c7750&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "16e6379f-6ae1-429c-86c3-0779a630cee4",
        "parentId" : "4458a23e-3301-4fa8-b8d6-6703ab3b1024",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Treating is an unsigned power of 2 makes perfect sense. Given that some of rules here work on signed integers as well, I'd probably keep the current name. ",
        "createdAt" : "2019-03-05T11:22:50Z",
        "updatedAt" : "2019-03-05T11:22:50Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "fb46ea2d58369c9eee6e40a1457001c347c98bd7",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,554 @@\n+package scala.scalanative\n+package interflow\n+\n+import java.{lang => jl}\n+import scalanative.nir._\n+import scalanative.linker._\n+import scalanative.util.{unreachable, And}\n+import nir.Bin.{And => Iand, _}\n+import nir.Comp._\n+import nir.Conv._\n+\n+trait Combine { self: Interflow =>\n+\n+  def combine(bin: Bin, ty: Type, l: Val, r: Val)(\n+      implicit state: State): Val = {\n+    import state.{materialize, delay, emit}\n+\n+    def fallback = {\n+      if (Op.Bin(bin, ty, l, r).isPure) {\n+        delay(Op.Bin(bin, ty, l, r))\n+      } else {\n+        emit(Op.Bin(bin, ty, materialize(l), materialize(r)))\n+      }\n+    }\n+\n+    bin match {\n+      case Iadd =>\n+        (l, r) match {\n+          // x + 0 ==> x\n+          case (x, v) if v.isZero =>\n+            x\n+\n+          // (x + b) + a ==> x + (a + b)\n+          case (BinRef(Iadd, x, Val.Int(b)), Val.Int(a)) =>\n+            combine(Iadd, ty, x, Val.Int(a + b))\n+          case (BinRef(Iadd, x, Val.Long(b)), Val.Long(a)) =>\n+            combine(Iadd, ty, x, Val.Long(a + b))\n+\n+          // (x - b) + a ==> x + (a - b)\n+          case (BinRef(Isub, x, Val.Int(b)), Val.Int(a)) =>\n+            combine(Iadd, ty, x, Val.Int(a - b))\n+          case (BinRef(Isub, x, Val.Long(b)), Val.Long(a)) =>\n+            combine(Iadd, ty, x, Val.Long(a - b))\n+\n+          // x + (0 - y) ==> x - y\n+          case (x, BinRef(Isub, v, y)) if v.isZero =>\n+            combine(Isub, ty, x, y)\n+\n+          // (0 - x) + y ==> y - x\n+          case (BinRef(Isub, v, x), y) if v.isZero =>\n+            combine(Isub, ty, y, x)\n+\n+          // (x - y) + y ==> x\n+          case (BinRef(Isub, x, y1), y2) if y1 == y2 =>\n+            x\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Isub =>\n+        (l, r) match {\n+          // x - 0 ==> x\n+          case (x, v) if v.isZero =>\n+            x\n+\n+          // x - x ==> 0\n+          case (lhs, rhs) if lhs == rhs =>\n+            zero(ty)\n+\n+          // (x - b) - a ==> x - (a + b)\n+          case (BinRef(Isub, x, Val.Int(b)), Val.Int(a)) =>\n+            combine(Isub, ty, x, Val.Int(a + b))\n+          case (BinRef(Isub, x, Val.Long(b)), Val.Long(a)) =>\n+            combine(Isub, ty, x, Val.Long(a + b))\n+\n+          // (x + b) - a ==> x - (a - b)\n+          case (BinRef(Iadd, x, Val.Int(b)), Val.Int(a)) =>\n+            combine(Isub, ty, x, Val.Int(a - b))\n+          case (BinRef(Iadd, x, Val.Long(b)), Val.Long(a)) =>\n+            combine(Isub, ty, x, Val.Long(a - b))\n+\n+          // x - (0 - y) ==> x + y\n+          case (x, BinRef(Isub, v, y)) if v.isZero =>\n+            combine(Iadd, ty, x, y)\n+\n+          // (x + y) - y ==> x\n+          case (BinRef(Iadd, x, y1), y2) if y1 == y2 =>\n+            x\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Imul =>\n+        (l, r) match {\n+          // x * 0 ==> 0\n+          case (lhs, v) if v.isZero =>\n+            zero(ty)\n+\n+          // x * 1 ==> x\n+          case (lhs, v) if v.isOne =>\n+            lhs\n+\n+          // x * -1 ==> -x\n+          case (lhs, v) if v.isMinusOne =>\n+            combine(Isub, ty, zero(ty), lhs)\n+\n+          // (x * b) * a ==> x * (a * b)\n+          case (BinRef(Imul, x, Val.Int(b)), Val.Int(a)) =>\n+            combine(Imul, ty, x, Val.Int(b * a))\n+          case (BinRef(Imul, x, Val.Long(b)), Val.Long(a)) =>\n+            combine(Imul, ty, x, Val.Long(b * a))\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Sdiv =>\n+        (l, r) match {\n+          // x signed_/ 1 ==> x\n+          case (lhs, v) if v.isOne =>\n+            lhs\n+\n+          // x signed_/ -1 ==> -x\n+          case (lhs, v) if v.isMinusOne =>\n+            combine(Isub, ty, zero(ty), lhs)\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Udiv =>\n+        (l, r) match {\n+          // x unsigned_/ 1 ==> x\n+          case (lhs, v) if v.isOne =>\n+            lhs\n+\n+          // x unsigned_/ 2^n ==> x >> n\n+          case (lhs, PowerOf2(shift)) =>\n+            combine(Lshr, ty, lhs, shift)\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Srem =>\n+        (l, r) match {\n+          // x signed_% 1 ==> 0\n+          case (lhs, v) if v.isOne =>\n+            zero(ty)\n+\n+          // x signed_% -1 ==> 0\n+          case (lhs, v) if v.isMinusOne =>\n+            zero(ty)\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Urem =>\n+        (l, r) match {\n+          // x unsigned_% 1 ==> 0\n+          case (lhs, v) if v.isOne =>\n+            zero(ty)\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Shl =>\n+        (l, r) match {\n+          // x: Int << v: Int ==> 0 if v & 31 == 0\n+          case (lhs, Val.Int(v)) if (v & 31) == 0 =>\n+            lhs\n+\n+          // x: Long << v: Long ==> 0 if a & 63 == 0\n+          case (lhs, Val.Long(v)) if (v & 63) == 0 =>\n+            lhs\n+\n+          // 0 << x ==> 0\n+          case (v, _) if v.isZero =>\n+            zero(ty)\n+\n+          // (x << a) << b ==> x << (a + b)\n+          case (BinRef(Shl, x, Val.Int(a)), Val.Int(b)) =>\n+            val dist = (a & 31) + (b & 31)\n+            if (dist >= 32) {\n+              Val.Int(0)\n+            } else {\n+              combine(Shl, ty, x, Val.Int(dist))\n+            }\n+          case (BinRef(Shl, x, Val.Long(a)), Val.Long(b)) =>\n+            val dist = (a & 63) + (b & 63)\n+            if (dist >= 64) {\n+              Val.Long(0)\n+            } else {\n+              combine(Shl, ty, x, Val.Long(dist))\n+            }\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Lshr =>\n+        (l, r) match {\n+          // x: Int >>> v: Int ==> x if v & 31 == 0\n+          case (lhs, Val.Int(v)) if (v & 31) == 0 =>\n+            lhs\n+\n+          // x: Long >>> v: Long ==> x if v & 63 == 0\n+          case (lhs, Val.Long(v)) if (v & 63) == 0 =>\n+            lhs\n+\n+          // 0 >>> x ==> 0\n+          case (lhs, _) if lhs.isZero =>\n+            zero(ty)\n+\n+          // (x >>> a) >>> b ==> x >>> (a + b)\n+          case (BinRef(Lshr, x, Val.Int(a)), Val.Int(b)) =>\n+            val dist = (a & 31) + (b & 31)\n+            if (dist >= 32) {\n+              Val.Int(0)\n+            } else {\n+              combine(Lshr, ty, x, Val.Int(dist))\n+            }\n+          case (BinRef(Lshr, x, Val.Long(a)), Val.Long(b)) =>\n+            val dist = (a & 63) + (b & 63)\n+            if (dist >= 64) {\n+              Val.Int(0)\n+            } else {\n+              combine(Lshr, ty, x, Val.Long(dist))\n+            }\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Ashr =>\n+        (l, r) match {\n+          // x: Int >> v: Int ==> x if v & 31 == 0\n+          case (lhs, Val.Int(a)) if (a & 31) == 0 =>\n+            lhs\n+\n+          // x: Long >> v: Long ==> x if v & 63 == 0\n+          case (lhs, Val.Long(v)) if (v & 63) == 0 =>\n+            lhs\n+\n+          // 0 >> x ==> 0\n+          case (lhs, _) if lhs.isZero =>\n+            zero(ty)\n+\n+          // -1 >> x ==> -1\n+          case (v, rhs) if v.isMinusOne =>\n+            minusOne(ty)\n+\n+          // (x >> a) >> b ==> x >> (a + b)\n+          case (BinRef(Ashr, x, Val.Int(a)), Val.Int(b)) =>\n+            val dist = Math.min((a & 31) + (b & 31), 31)\n+            combine(Ashr, ty, x, Val.Int(dist))\n+          case (BinRef(Ashr, x, Val.Long(a)), Val.Long(b)) =>\n+            val dist = Math.min((a & 63) + (b & 63), 63)\n+            combine(Ashr, ty, x, Val.Long(dist))\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Iand =>\n+        (l, r) match {\n+          // x & x ==> x\n+          case (lhs, rhs) if lhs == rhs =>\n+            lhs\n+\n+          // x & 0 ==> 0\n+          case (lhs, v) if v.isZero =>\n+            zero(ty)\n+\n+          // x & -1 ==> x\n+          case (lhs, v) if v.isMinusOne =>\n+            lhs\n+\n+          // (x & a) & b ==> x & (a & b)\n+          case (BinRef(Iand, x, Val.Int(a)), Val.Int(b)) =>\n+            combine(Iand, ty, x, Val.Int(a & b))\n+          case (BinRef(Iand, x, Val.Long(a)), Val.Long(b)) =>\n+            combine(Iand, ty, x, Val.Long(a & b))\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Or =>\n+        (l, r) match {\n+          // x | x ==> x\n+          case (lhs, rhs) if lhs == rhs =>\n+            lhs\n+\n+          // x | 0 ==> x\n+          case (lhs, v) if v.isZero =>\n+            lhs\n+\n+          // x | -1 ==> -1\n+          case (lhs, v) if v.isMinusOne =>\n+            minusOne(ty)\n+\n+          // (x or a) or b ==> x or (a or b)\n+          case (BinRef(Or, x, Val.Int(a)), Val.Int(b)) =>\n+            combine(Or, ty, x, Val.Int(a | b))\n+          case (BinRef(Or, x, Val.Long(a)), Val.Long(b)) =>\n+            combine(Or, ty, x, Val.Long(a | b))\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case Xor =>\n+        (l, r) match {\n+          // x ^ x ==> 0\n+          case (lhs, rhs) if lhs == rhs =>\n+            zero(ty)\n+\n+          // x ^ 0 ==> x\n+          case (lhs, v) if v.isZero =>\n+            lhs\n+\n+          // (x ^ a) ^ b ==> x ^ (a ^ b)\n+          case (BinRef(Xor, x, Val.Int(a)), Val.Int(b)) =>\n+            combine(Xor, ty, x, Val.Int(a ^ b))\n+          case (BinRef(Xor, x, Val.Long(a)), Val.Long(b)) =>\n+            combine(Xor, ty, x, Val.Long(a ^ b))\n+\n+          case _ =>\n+            fallback\n+        }\n+\n+      case _ =>\n+        fallback\n+    }\n+  }\n+\n+  def combine(comp: Comp, ty: Type, l: Val, r: Val)(\n+      implicit state: State): Val = {\n+    import state.{materialize, delay, emit}\n+\n+    (comp, l, r) match {\n+      // Two virtual allocations will compare equal if\n+      // and only if they have the same virtual address.\n+      case (Ieq, Val.Virtual(l), Val.Virtual(r))\n+          if state.isVirtual(l) && state.isVirtual(r) =>\n+        Val.Bool(l == r)\n+      case (Ine, Val.Virtual(l), Val.Virtual(r))\n+          if state.isVirtual(l) && state.isVirtual(r) =>\n+        Val.Bool(l != r)\n+\n+      // Not-yet-materialized virtual allocation will never be\n+      // the same as already existing allocation (be it null\n+      // or any other value).\n+      case (Ieq, Val.Virtual(addr), r) if state.isVirtual(addr) =>\n+        Val.False\n+      case (Ieq, l, Val.Virtual(addr)) if state.isVirtual(addr) =>\n+        Val.False\n+      case (Ine, Val.Virtual(addr), r) if state.isVirtual(addr) =>\n+        Val.True\n+      case (Ine, l, Val.Virtual(addr)) if state.isVirtual(addr) =>\n+        Val.True\n+\n+      // Comparing non-nullable value with null will always\n+      // yield the same result.\n+      case (Ieq, v @ Of(ty: Type.RefKind), Val.Null) if !ty.isNullable =>\n+        Val.False\n+      case (Ieq, Val.Null, v @ Of(ty: Type.RefKind)) if !ty.isNullable =>\n+        Val.False\n+      case (Ine, v @ Of(ty: Type.RefKind), Val.Null) if !ty.isNullable =>\n+        Val.True\n+      case (Ine, Val.Null, v @ Of(ty: Type.RefKind)) if !ty.isNullable =>\n+        Val.True\n+\n+      // Comparing two non-null module references will\n+      // yield true only if it's the same module.\n+      case (Ieq,\n+            l @ Of(And(lty: Type.RefKind, ClassRef(lcls))),\n+            r @ Of(And(rty: Type.RefKind, ClassRef(rcls))))\n+          if !lty.isNullable && lty.isExact && lcls.isModule\n+            && !rty.isNullable && rty.isExact && rcls.isModule =>\n+        Val.Bool(lcls.name == rcls.name)\n+      case (Ine,\n+            l @ Of(And(lty: Type.RefKind, ClassRef(lcls))),\n+            r @ Of(And(rty: Type.RefKind, ClassRef(rcls))))\n+          if !lty.isNullable && lty.isExact && lcls.isModule\n+            && !rty.isNullable && rty.isExact && rcls.isModule =>\n+        Val.Bool(lcls.name != rcls.name)\n+\n+      // Comparisons against the same SSA value or\n+      // against true/false are statically known.\n+      case (Ieq, lhs, rhs) if (lhs == rhs) =>\n+        Val.True\n+      case (Ieq, lhs, Val.True) =>\n+        lhs\n+      case (Ine, lhs, rhs) if (lhs == rhs) =>\n+        Val.False\n+      case (Ine, lhs, Val.False) =>\n+        lhs\n+\n+      // Integer comparisons against corresponding\n+      // min/max value are often statically known.\n+      case (Ugt, lhs, v) if v.isUnsignedMaxValue =>\n+        Val.False\n+      case (Uge, lhs, v) if v.isUnsignedMinValue =>\n+        Val.True\n+      case (Ult, lhs, v) if v.isUnsignedMinValue =>\n+        Val.False\n+      case (Ule, lhs, v) if v.isUnsignedMaxValue =>\n+        Val.True\n+      case (Sgt, lhs, v) if v.isSignedMaxValue =>\n+        Val.False\n+      case (Sge, lhs, v) if v.isSignedMinValue =>\n+        Val.True\n+      case (Slt, lhs, v) if v.isSignedMinValue =>\n+        Val.False\n+      case (Sle, lhs, v) if v.isSignedMaxValue =>\n+        Val.True\n+\n+      // ((x xor y) == 0) ==> (x == y)\n+      case (Ieq, BinRef(Xor, x, y), v) if v.isZero =>\n+        combine(Ieq, ty, x, y)\n+\n+      // ((x xor y) != 0) ==> (x != y)\n+      case (Ine, BinRef(Xor, x, y), v) if v.isZero =>\n+        combine(Ine, ty, x, y)\n+\n+      // ((x + a) == b) ==> (x == (b - a))\n+      case (Ieq, BinRef(Iadd, x, Val.Char(a)), Val.Char(b)) =>\n+        combine(Ieq, ty, x, Val.Char((b - a).toChar))\n+      case (Ieq, BinRef(Iadd, x, Val.Byte(a)), Val.Byte(b)) =>\n+        combine(Ieq, ty, x, Val.Byte((b - a).toByte))\n+      case (Ieq, BinRef(Iadd, x, Val.Short(a)), Val.Short(b)) =>\n+        combine(Ieq, ty, x, Val.Short((b - a).toShort))\n+      case (Ieq, BinRef(Iadd, x, Val.Int(a)), Val.Int(b)) =>\n+        combine(Ieq, ty, x, Val.Int(b - a))\n+      case (Ieq, BinRef(Iadd, x, Val.Long(a)), Val.Long(b)) =>\n+        combine(Ieq, ty, x, Val.Long(b - a))\n+\n+      // ((x - a) == b) ==> (x == (a + b))\n+      case (Ieq, BinRef(Isub, x, Val.Char(a)), Val.Char(b)) =>\n+        combine(Ieq, ty, x, Val.Char((a + b).toChar))\n+      case (Ieq, BinRef(Isub, x, Val.Byte(a)), Val.Byte(b)) =>\n+        combine(Ieq, ty, x, Val.Byte((a + b).toByte))\n+      case (Ieq, BinRef(Isub, x, Val.Short(a)), Val.Short(b)) =>\n+        combine(Ieq, ty, x, Val.Short((a + b).toShort))\n+      case (Ieq, BinRef(Isub, x, Val.Int(a)), Val.Int(b)) =>\n+        combine(Ieq, ty, x, Val.Int(a + b))\n+      case (Ieq, BinRef(Isub, x, Val.Long(a)), Val.Long(b)) =>\n+        combine(Ieq, ty, x, Val.Long(a + b))\n+\n+      // ((a - x) == b) ==> (x == (a - b))\n+      case (Ieq, BinRef(Isub, Val.Char(a), x), Val.Char(b)) =>\n+        combine(Ieq, ty, x, Val.Char((a - b).toChar))\n+      case (Ieq, BinRef(Isub, Val.Byte(a), x), Val.Byte(b)) =>\n+        combine(Ieq, ty, x, Val.Byte((a - b).toByte))\n+      case (Ieq, BinRef(Isub, Val.Short(a), x), Val.Short(b)) =>\n+        combine(Ieq, ty, x, Val.Short((a - b).toShort))\n+      case (Ieq, BinRef(Isub, Val.Int(a), x), Val.Int(b)) =>\n+        combine(Ieq, ty, x, Val.Int(a - b))\n+      case (Ieq, BinRef(Isub, Val.Long(a), x), Val.Long(b)) =>\n+        combine(Ieq, ty, x, Val.Long(a - b))\n+\n+      // ((x xor a) == b) ==> (x == (a xor b))\n+      case (Ieq, BinRef(Xor, x, Val.Char(a)), Val.Char(b)) =>\n+        combine(Ieq, ty, x, Val.Char((a ^ b).toChar))\n+      case (Ieq, BinRef(Xor, x, Val.Byte(a)), Val.Byte(b)) =>\n+        combine(Ieq, ty, x, Val.Byte((a ^ b).toByte))\n+      case (Ieq, BinRef(Xor, x, Val.Short(a)), Val.Short(b)) =>\n+        combine(Ieq, ty, x, Val.Short((a ^ b).toShort))\n+      case (Ieq, BinRef(Xor, x, Val.Int(a)), Val.Int(b)) =>\n+        combine(Ieq, ty, x, Val.Int(a ^ b))\n+      case (Ieq, BinRef(Xor, x, Val.Long(a)), Val.Long(b)) =>\n+        combine(Ieq, ty, x, Val.Long(a ^ b))\n+\n+      // ((x xor true) == y) ==> (x != y)\n+      case (Ieq, BinRef(Xor, x, Val.True), y) =>\n+        combine(Ine, ty, x, y)\n+\n+      // (x == (y xor true)) ==> (x != y)\n+      case (Ieq, x, BinRef(Xor, y, Val.True)) =>\n+        combine(Ine, ty, x, y)\n+\n+      case (_, l, r) =>\n+        delay(Op.Comp(comp, ty, r, l))\n+    }\n+  }\n+\n+  def combine(conv: Conv, ty: Type, value: Val)(implicit state: State): Val = {\n+    import state.{materialize, delay, emit}\n+\n+    (conv, ty, value) match {\n+      // trunc[iN] (trunc[iM] x) ==> trunc[iN] x if N < M\n+      case (Trunc, Type.I(n, _), ConvRef(Trunc, Type.I(m, _), x)) if n < m =>\n+        combine(Trunc, ty, x)\n+\n+      // sext[iN] (sext[iM] x) ==> sext[iN] x if N > M\n+      case (Sext, Type.I(n, _), ConvRef(Sext, Type.I(m, _), x)) if n > m =>\n+        combine(Sext, ty, x)\n+\n+      // zext[iN] (zext[iM] x) ==> zext[iN] x if N > M\n+      case (Zext, Type.I(n, _), ConvRef(Zext, Type.I(m, _), x)) if n > m =>\n+        combine(Zext, ty, x)\n+\n+      // ptrtoint[long] (inttoptr[long] x) ==> x\n+      case (Ptrtoint, Type.Long, ConvRef(Inttoptr, Type.Long, x)) =>\n+        x\n+\n+      // inttoptr[long] (ptrtoint[long] x) ==> x\n+      case (Inttoptr, Type.Long, ConvRef(Ptrtoint, Type.Long, x)) =>\n+        x\n+\n+      // bitcast[ty1] (bitcast(ty2) x) ==> bitcast[ty1] x\n+      case (Bitcast, _, ConvRef(Bitcast, _, x)) =>\n+        combine(Bitcast, ty, x)\n+\n+      case _ =>\n+        delay(Op.Conv(conv, ty, value))\n+    }\n+  }\n+\n+  private def zero(ty: Type): Val =\n+    Val.Zero(ty).canonicalize\n+\n+  private def minusOne(ty: Type): Val = ty match {\n+    case Type.Byte   => Val.Byte(-1)\n+    case Type.Short  => Val.Short(-1)\n+    case Type.Int    => Val.Int(-1)\n+    case Type.Long   => Val.Long(-1)\n+    case Type.Float  => Val.Float(-1)\n+    case Type.Double => Val.Double(-1)\n+    case _           => unreachable\n+  }\n+\n+  object PowerOf2 {\n+    def unapply(v: Val): Option[Val] = {\n+      v match {\n+        case Val.Int(v) if isPowerOfTwo(v) =>\n+          Some(Val.Int(jl.Integer.numberOfTrailingZeros(v)))\n+        case Val.Long(v) if isPowerOfTwo(v) =>\n+          Some(Val.Long(jl.Long.numberOfTrailingZeros(v)))\n+        case _ =>\n+          None\n+      }\n+    }\n+\n+    def isPowerOfTwo(x: Long): Boolean =\n+      (x & (x - 1)) == 0"
  }
]