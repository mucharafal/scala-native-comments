[
  {
    "id" : "e4fecc62-4bdd-4547-9143-12e5f04ff48e",
    "prId" : 465,
    "comments" : [
      {
        "id" : "b115a6dd-a0a6-4b4e-9aa7-1b2590eabf89",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`Ieq` and `Ine` are commutative. TheyÂ just compare numbers bit-wise. ",
        "createdAt" : "2016-12-27T14:45:33Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "1d4e9548-0e81-47a1-8ab6-cfc9b39b5d8e",
        "parentId" : "b115a6dd-a0a6-4b4e-9aa7-1b2590eabf89",
        "author" : {
          "login" : "hkapp",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10584771?v=4"
        },
        "body" : "Does the previous comment about floating point ops mean that we also don't do anything about `Feq` and `Fne` ?",
        "createdAt" : "2016-12-27T14:57:21Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "hkapp",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10584771?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "e41d004f-daa3-4462-bc08-23a92aa019c7",
        "parentId" : "b115a6dd-a0a6-4b4e-9aa7-1b2590eabf89",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Yes. ",
        "createdAt" : "2016-12-27T15:05:09Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca6cd99cab9ef821477542ce6e3dc5dd03432977",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.scalanative\n+package optimizer\n+package pass\n+\n+import analysis.ClassHierarchy._\n+import nir._, Inst.Let\n+\n+/** Moves constant operands in Op.Bin and Op.Comp to the right. */\n+class Canonicalization extends Pass {\n+\n+  override def preInst = {\n+    case Let(n, Op.Bin(bin, ty, lhs, rhs))\n+        if (commutativeBin(bin) && constant(lhs)) =>\n+      Seq(Let(n, Op.Bin(bin, ty, rhs, lhs)))\n+\n+    case Let(n, Op.Comp(comp, ty, lhs, rhs))\n+        if (commutativeComp(comp) && constant(lhs)) =>\n+      Seq(Let(n, Op.Comp(comp, ty, rhs, lhs)))\n+  }\n+\n+  private def commutativeBin(bin: Bin): Boolean = {\n+    import Bin._\n+    bin match {\n+      case Iadd | Fadd | Imul | Fmul | And | Or | Xor => true\n+      case Isub | Fsub | Sdiv | Udiv | Fdiv | Srem | Urem | Frem | Shl | Lshr |\n+          Ashr =>\n+        false\n+    }\n+  }\n+\n+  private def commutativeComp(comp: Comp): Boolean = {\n+    import Comp._\n+    comp match {\n+      case Ieq | Ine | Feq | Fne => true"
  },
  {
    "id" : "89b00eac-676e-4f26-9e2c-bbd5db9f1144",
    "prId" : 465,
    "comments" : [
      {
        "id" : "d22da665-1b6f-4b86-b202-649780ab0860",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`scalarValue` would be a better name for this one. We already have `Val.Const` and `Defn.Const` which mean a different thing. ",
        "createdAt" : "2016-12-27T14:48:01Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca6cd99cab9ef821477542ce6e3dc5dd03432977",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.scalanative\n+package optimizer\n+package pass\n+\n+import analysis.ClassHierarchy._\n+import nir._, Inst.Let\n+\n+/** Moves constant operands in Op.Bin and Op.Comp to the right. */\n+class Canonicalization extends Pass {\n+\n+  override def preInst = {\n+    case Let(n, Op.Bin(bin, ty, lhs, rhs))\n+        if (commutativeBin(bin) && constant(lhs)) =>\n+      Seq(Let(n, Op.Bin(bin, ty, rhs, lhs)))\n+\n+    case Let(n, Op.Comp(comp, ty, lhs, rhs))\n+        if (commutativeComp(comp) && constant(lhs)) =>\n+      Seq(Let(n, Op.Comp(comp, ty, rhs, lhs)))\n+  }\n+\n+  private def commutativeBin(bin: Bin): Boolean = {\n+    import Bin._\n+    bin match {\n+      case Iadd | Fadd | Imul | Fmul | And | Or | Xor => true\n+      case Isub | Fsub | Sdiv | Udiv | Fdiv | Srem | Urem | Frem | Shl | Lshr |\n+          Ashr =>\n+        false\n+    }\n+  }\n+\n+  private def commutativeComp(comp: Comp): Boolean = {\n+    import Comp._\n+    comp match {\n+      case Ieq | Ine | Feq | Fne => true\n+      case _                     => false\n+    }\n+  }\n+\n+  private def constant(value: Val): Boolean = {"
  },
  {
    "id" : "a0be1f9d-2e15-44a9-b910-dc53e3fc6e3e",
    "prId" : 465,
    "comments" : [
      {
        "id" : "066d3837-c159-4f31-a210-a8fdd6138f14",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Lets not **ever** touch floating point ops in any of the transformations. Just leave them as is. Due to all of the special cases they have it's surprisingly easy to optimise changing semantics of the program. ",
        "createdAt" : "2016-12-27T14:50:22Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "331a33ad-a0d4-4a92-9310-6bd59be46f9c",
        "parentId" : "066d3837-c159-4f31-a210-a8fdd6138f14",
        "author" : {
          "login" : "hkapp",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10584771?v=4"
        },
        "body" : "Yeah, for the other passes, I was having a hard time knowing what could be a problem, and what couldn't. Should this be true for constant folding as well ? (coming next)",
        "createdAt" : "2016-12-27T14:56:24Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "hkapp",
          "name" : null,
          "avatarUrl" : "https://avatars3.githubusercontent.com/u/10584771?v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "c7e847f9-3483-4660-8af8-47a31f90e75f",
        "parentId" : "066d3837-c159-4f31-a210-a8fdd6138f14",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "I think we should just completely delegate all floating point optimisations to LLVM. Even constant folding. ",
        "createdAt" : "2016-12-27T15:04:38Z",
        "updatedAt" : "2016-12-27T15:32:31Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "ca6cd99cab9ef821477542ce6e3dc5dd03432977",
    "line" : null,
    "diffHunk" : "@@ -0,0 +1,52 @@\n+package scala.scalanative\n+package optimizer\n+package pass\n+\n+import analysis.ClassHierarchy._\n+import nir._, Inst.Let\n+\n+/** Moves constant operands in Op.Bin and Op.Comp to the right. */\n+class Canonicalization extends Pass {\n+\n+  override def preInst = {\n+    case Let(n, Op.Bin(bin, ty, lhs, rhs))\n+        if (commutativeBin(bin) && constant(lhs)) =>\n+      Seq(Let(n, Op.Bin(bin, ty, rhs, lhs)))\n+\n+    case Let(n, Op.Comp(comp, ty, lhs, rhs))\n+        if (commutativeComp(comp) && constant(lhs)) =>\n+      Seq(Let(n, Op.Comp(comp, ty, rhs, lhs)))\n+  }\n+\n+  private def commutativeBin(bin: Bin): Boolean = {\n+    import Bin._\n+    bin match {\n+      case Iadd | Fadd | Imul | Fmul | And | Or | Xor => true"
  }
]