[
  {
    "id" : "b18868dc-c9ef-49a8-aa7c-644c24e18509",
    "prId" : 173,
    "comments" : [
      {
        "id" : "bd03a2fa-8924-42d4-a70b-8915d1c6b65e",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This one is better off being a sequence of vals, that incrementally compute the result.\n",
        "createdAt" : "2016-06-21T11:46:48Z",
        "updatedAt" : "2016-06-24T06:14:48Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 220,
    "diffHunk" : "@@ -36,81 +47,345 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toString(i: scala.Long): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+//  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n   @inline def hashCode(value: scala.Long): Int =\n     value.toInt ^ (value >>> 32).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)"
  },
  {
    "id" : "cc4742db-9bf8-4a62-8d56-5fcef96c0856",
    "prId" : 173,
    "comments" : [
      {
        "id" : "fdd7a275-1896-4c97-9492-dacbce505082",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Use http://llvm.org/docs/LangRef.html#llvm-ctlz-intrinsic instead. \n",
        "createdAt" : "2016-06-21T11:48:10Z",
        "updatedAt" : "2016-06-24T06:14:48Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : null,
    "diffHunk" : "@@ -36,81 +47,345 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toString(i: scala.Long): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+//  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n   @inline def hashCode(value: scala.Long): Int =\n     value.toInt ^ (value >>> 32).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  def remainderUnsigned(\n-      dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    remULong(dividend, divisor)\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def numberOfLeadingZeros(l: scala.Long): Int = {"
  },
  {
    "id" : "a42e8288-c7ad-4c9d-ba98-ca945603f15f",
    "prId" : 173,
    "comments" : [
      {
        "id" : "9632e5d1-b702-45f4-a234-5237a3e9f9fb",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Use http://llvm.org/docs/LangRef.html#llvm-cttz-intrinsic instead.\n",
        "createdAt" : "2016-06-21T11:48:32Z",
        "updatedAt" : "2016-06-24T06:14:48Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : null,
    "diffHunk" : "@@ -36,81 +47,345 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n-\n-  @inline def toString(i: scala.Long): String = ???\n-\n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+//  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n   @inline def hashCode(value: scala.Long): Int =\n     value.toInt ^ (value >>> 32).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  def remainderUnsigned(\n-      dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    remULong(dividend, divisor)\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def numberOfLeadingZeros(l: scala.Long): Int = {\n+    var lng = l\n+    lng |= lng >> 1\n+    lng |= lng >> 2\n+    lng |= lng >> 4\n+    lng |= lng >> 8\n+    lng |= lng >> 16\n+    lng |= lng >> 32\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+    bitCount(~lng)\n+  }\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def numberOfTrailingZeros(l: scala.Long): Int ="
  },
  {
    "id" : "80d85dc1-6f5d-4a46-8e82-e2ea4df34867",
    "prId" : 173,
    "comments" : [
      {
        "id" : "fd5a6e17-a157-4874-b8de-8a178dc1b720",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This one should be `llvm.ctlz.i64` rather than `i8` and no conversion to byte. \n",
        "createdAt" : "2016-06-25T10:36:34Z",
        "updatedAt" : "2016-06-25T10:36:34Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 241,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)"
  },
  {
    "id" : "ee16f299-fff6-4b32-8d5b-787bb737e2ef",
    "prId" : 173,
    "comments" : [
      {
        "id" : "7a303534-2d8c-4c22-b3d8-1d805ad71a15",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This one should be `llvm.cttz.i64` rather than `i8` and no conversion to byte. \n",
        "createdAt" : "2016-06-25T10:36:42Z",
        "updatedAt" : "2016-06-25T10:36:42Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 244,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)"
  },
  {
    "id" : "ae3c9c7f-37f0-4b03-bd8e-b6b8c613e424",
    "prId" : 173,
    "comments" : [
      {
        "id" : "4a6c4680-af05-4d60-9842-3a919e1f3003",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`@inline`\n",
        "createdAt" : "2016-06-25T10:37:43Z",
        "updatedAt" : "2016-06-25T10:37:43Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 243,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int ="
  },
  {
    "id" : "b67374c9-f917-4629-9a32-c16fb754c66a",
    "prId" : 173,
    "comments" : [
      {
        "id" : "bec35c71-d098-4d35-8f95-0946e6e820b6",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`@inline`\n",
        "createdAt" : "2016-06-25T10:37:59Z",
        "updatedAt" : "2016-06-25T10:37:59Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 240,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int ="
  },
  {
    "id" : "ed93b28b-e9d3-4fa7-bd2f-a611ed2330ea",
    "prId" : 173,
    "comments" : [
      {
        "id" : "0d6cadb3-4109-4bcc-bd80-c777cd6ff3b9",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`@inline`\n",
        "createdAt" : "2016-06-25T10:38:54Z",
        "updatedAt" : "2016-06-25T10:38:54Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 264,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long ="
  },
  {
    "id" : "be9287f8-cfd6-4101-b72d-40927eb25bce",
    "prId" : 173,
    "comments" : [
      {
        "id" : "ddc94b75-af6a-40c1-b9da-ae7520036b81",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Use `llvm.bitreverse.i64` here. \n",
        "createdAt" : "2016-06-25T10:39:55Z",
        "updatedAt" : "2016-06-25T10:39:55Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 277,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined"
  },
  {
    "id" : "cb42eeb1-6497-462b-88dd-ed083c3eea40",
    "prId" : 173,
    "comments" : [
      {
        "id" : "53e4484e-dfbe-42e4-9f65-03cb5217ac3a",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Use `llvm.bswap.i64` here.\n",
        "createdAt" : "2016-06-25T10:41:54Z",
        "updatedAt" : "2016-06-25T10:41:59Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 281,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined"
  },
  {
    "id" : "f11cf5e0-a5e6-420d-ae21-56ca24d2ecaa",
    "prId" : 173,
    "comments" : [
      {
        "id" : "3e74e121-767c-412e-9914-bd82e8d77c2b",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This one is not an intrinsic and needs to be implemented here. \n",
        "createdAt" : "2016-06-25T10:43:15Z",
        "updatedAt" : "2016-06-25T10:43:15Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "32c80b36-812d-4e4c-9631-1580a456676c",
        "parentId" : "3e74e121-767c-412e-9914-bd82e8d77c2b",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "On the other hand you can comment-it-out, it's out of scope of this pr. \n",
        "createdAt" : "2016-06-25T10:49:58Z",
        "updatedAt" : "2016-06-25T10:49:58Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca016c0f-631c-4e0a-8485-38d18ee7078d",
        "parentId" : "3e74e121-767c-412e-9914-bd82e8d77c2b",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "A possible implementation is `(i << distance) | (i >>> -distance)`.\n",
        "createdAt" : "2016-06-25T11:39:34Z",
        "updatedAt" : "2016-06-25T11:39:34Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "7a48fb19-ff3e-42c7-bbc7-7e77b4b4a309",
        "parentId" : "3e74e121-767c-412e-9914-bd82e8d77c2b",
        "author" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Please keep the bit tricks coming. I'm subscribed to this repo, and I'm enjoying every moment of it.\n",
        "createdAt" : "2016-06-25T11:56:28Z",
        "updatedAt" : "2016-06-25T11:56:28Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 285,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined"
  },
  {
    "id" : "85e8b157-eb14-43c7-9376-0dddd800c1cb",
    "prId" : 173,
    "comments" : [
      {
        "id" : "8ac120db-cab3-4ea4-b7a7-d9da4fdeaced",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "This one is not an intrinsic and needs to be implemented here. \n",
        "createdAt" : "2016-06-25T10:43:19Z",
        "updatedAt" : "2016-06-25T10:43:19Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f202abe1-05b0-4249-a432-c3fd0c6b38e9",
        "parentId" : "8ac120db-cab3-4ea4-b7a7-d9da4fdeaced",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "On the other hand you can comment-it-out, it's out of scope of this pr. \n",
        "createdAt" : "2016-06-25T10:50:03Z",
        "updatedAt" : "2016-06-25T10:50:03Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "53003fd8-68c0-4d08-974b-bdecd85379fe",
        "parentId" : "8ac120db-cab3-4ea4-b7a7-d9da4fdeaced",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "A possible implementation is `(i >>> distance) | (i << -distance)`\n",
        "createdAt" : "2016-06-25T11:39:55Z",
        "updatedAt" : "2016-06-25T11:39:55Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 289,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined"
  },
  {
    "id" : "c46b4766-e90b-4402-b599-385674ff4986",
    "prId" : 173,
    "comments" : [
      {
        "id" : "66c55504-c0bb-4fba-94c1-b12b3b7f99f9",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "No need for `@inline` here. It's a large method. \n",
        "createdAt" : "2016-06-25T10:44:04Z",
        "updatedAt" : "2016-06-25T10:44:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 384,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 1\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 1) + '0').toChar\n+      j >>= 1\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 4\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      var t = (j & 15).toInt\n+      if (t > 9) {\n+        t = t - 10 + 'a'\n+      } else {\n+        t += '0'\n+      }\n+\n+      buffer(count) = t.toChar\n+      j >>= 4\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toOctalString(l: scala.Long): _String = {\n+    var count = 1\n+    if (l < 0) {\n+      count = 22\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>>= 3\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      buffer(count) = ((j & 7) + '0').toChar\n+      j >>>= 3\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def toBinaryString(l: scala.Long): String = ???\n+  @inline def toString(l: scala.Long): _String =\n+    toString(l, 10)\n+\n+  @inline def toString(_l: scala.Long, _radix: Int): _String = {"
  },
  {
    "id" : "a9169caa-3cbd-4c98-a262-24f3672bf235",
    "prId" : 173,
    "comments" : [
      {
        "id" : "267bc868-c75a-4775-971a-5f9250c50827",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Needs to be defined, not an intrinsic. \n",
        "createdAt" : "2016-06-25T10:44:21Z",
        "updatedAt" : "2016-06-25T10:44:21Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 425,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 1\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 1) + '0').toChar\n+      j >>= 1\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 4\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      var t = (j & 15).toInt\n+      if (t > 9) {\n+        t = t - 10 + 'a'\n+      } else {\n+        t += '0'\n+      }\n+\n+      buffer(count) = t.toChar\n+      j >>= 4\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toOctalString(l: scala.Long): _String = {\n+    var count = 1\n+    if (l < 0) {\n+      count = 22\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>>= 3\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      buffer(count) = ((j & 7) + '0').toChar\n+      j >>>= 3\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def toBinaryString(l: scala.Long): String = ???\n+  @inline def toString(l: scala.Long): _String =\n+    toString(l, 10)\n+\n+  @inline def toString(_l: scala.Long, _radix: Int): _String = {\n+    if (_l == 0) {\n+      \"0\"\n+    } else {\n+      val radix =\n+        if (_radix < Character.MIN_RADIX || _radix > Character.MAX_RADIX) 10\n+        else _radix\n+      val negative = _l < 0\n+      var (count, j) =\n+        if (negative) (2, _l)\n+        else (1, -_l)\n+\n+      var l = _l\n+      while (l != 0) {\n+        count += 1\n+        l = l / radix\n+      }\n+\n+      val buffer = new Array[Char](count)\n+      do {\n+        var ch = 0 - (j % radix)\n+        if (ch > 9) {\n+          ch = ch - 10 + 'a'\n+        } else {\n+          ch += '0'\n+        }\n+        count -= 1\n+        buffer(count) = ch.toChar\n+        j = j / radix\n+      } while (j != 0)\n+\n+      if (negative) {\n+        buffer(0) = '-'\n+      }\n+\n+      new _String(0, buffer.length, buffer)\n+    }\n+  }\n \n-  def toHexString(l: scala.Long): String = ???\n+  @inline def toUnsignedString(l: scala.Long, radix: Int): _String =\n+    undefined"
  },
  {
    "id" : "b21634c0-80eb-446b-aa7b-fa0c688785ce",
    "prId" : 173,
    "comments" : [
      {
        "id" : "1672a643-2ea0-404a-ae7b-5e8b9c8e9cfb",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "No need for that loop:\n\n``` scala\nvar count = if (l == 0L) 1 else 64 - numberOfLeadingZeros(l)\n```\n",
        "createdAt" : "2016-06-25T11:46:57Z",
        "updatedAt" : "2016-06-25T11:46:57Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 313,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 1\n+      }\n+    }"
  },
  {
    "id" : "6e77fbac-05d8-4e1a-8c50-14903bea3667",
    "prId" : 173,
    "comments" : [
      {
        "id" : "01ab0176-5d78-451c-b371-479a9b7e9282",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Here it's a bit more complicated due to the ceil division by 4, but still possible:\n\n``` scala\nvar count = if (l == 0L) 1 else ((64 + 3) - numberOfLeadingZeros(l)) >> 2\n```\n",
        "createdAt" : "2016-06-25T11:49:03Z",
        "updatedAt" : "2016-06-25T11:49:03Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 338,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 1\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 1) + '0').toChar\n+      j >>= 1\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 4\n+      }\n+    }"
  },
  {
    "id" : "00a95f15-72c5-4cd3-ac54-2ee926576cf0",
    "prId" : 173,
    "comments" : [
      {
        "id" : "1c963360-a76f-4df1-af79-c279f5d02075",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "And applying the same technique here:\n\n``` scala\nvar count = if (l == 0L) 1 else ((64 + 2) - numberOfLeadingZeros(l)) / 3\n```\n",
        "createdAt" : "2016-06-25T11:50:07Z",
        "updatedAt" : "2016-06-25T11:50:07Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 368,
    "diffHunk" : "@@ -36,81 +46,347 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: _String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n \n-  @inline def toString(i: scala.Long): String = ???\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: _String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: _String): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return null\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return null\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        null\n+    }\n+  }\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def getLong(nm: _String, v: scala.Long): Long = {\n+    if (nm == null || nm.length() == 0) {\n+      return valueOf(v)\n+    }\n+\n+    val prop = System.getProperty(nm)\n+    if (prop == null) {\n+      return valueOf(v)\n+    }\n+\n+    try {\n+      decode(prop)\n+    } catch {\n+      case e: NumberFormatException =>\n+        valueOf(v);\n+    }\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n+\n+  def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i8`(l.toByte, iszeroundef = false)\n+\n+  def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i8`(l.toByte, iszeroundef = false)\n+\n+  @inline def parseLong(s: _String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: _String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  def parseUnsignedLong(s: _String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: _String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    undefined\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(i: scala.Long): scala.Long =\n+    undefined\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    undefined\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 1\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 1) + '0').toChar\n+      j >>= 1\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): _String = {\n+    var count = 1\n+\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>= 4\n+      }\n+    }\n+\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      var t = (j & 15).toInt\n+      if (t > 9) {\n+        t = t - 10 + 'a'\n+      } else {\n+        t += '0'\n+      }\n+\n+      buffer(count) = t.toChar\n+      j >>= 4\n+    } while (count > 0)\n+\n+    new _String(0, buffer.length, buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toOctalString(l: scala.Long): _String = {\n+    var count = 1\n+    if (l < 0) {\n+      count = 22\n+    } else {\n+      var k = l\n+      while (k != 0) {\n+        count += 1\n+        k >>>= 3\n+      }\n+    }"
  },
  {
    "id" : "48870db4-0b81-46a0-98ff-a931a91160ed",
    "prId" : 210,
    "comments" : [
      {
        "id" : "cc064a9c-3c8b-4dbb-bec4-634214cfebc7",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Not an intrinsic, needs to be implemented in the library code. \n",
        "createdAt" : "2016-06-30T12:04:28Z",
        "updatedAt" : "2016-06-30T12:04:28Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "89faef4c-b18a-4c69-965a-f579c7e1e609",
        "parentId" : "cc064a9c-3c8b-4dbb-bec4-634214cfebc7",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "See https://github.com/scala-native/scala-native/pull/210/files?diff=split#diff-ae8efe40d10efb6271e358ad1fb7e0c8R163\n",
        "createdAt" : "2016-06-30T12:09:55Z",
        "updatedAt" : "2016-06-30T12:09:55Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 109,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined"
  },
  {
    "id" : "62ade940-166e-4c96-84ff-465175bbe2a0",
    "prId" : 210,
    "comments" : [
      {
        "id" : "26e6a141-b1f6-42e4-8e74-bc68567eb412",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Not an intrinsic, needs to be implemented in the library code. \n",
        "createdAt" : "2016-06-30T12:04:51Z",
        "updatedAt" : "2016-06-30T12:04:51Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 266,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i64`(l, iszeroundef = false).toInt\n+\n+  @inline def parseLong(s: String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: String): scala.Long =\n+    parseLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: String): scala.Long =\n+    parseUnsignedLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def parseUnsignedLong(s: String, radix: Int): scala.Long =\n+    undefined"
  },
  {
    "id" : "b6c47442-779d-413d-9bc3-2ef1d582582d",
    "prId" : 210,
    "comments" : [
      {
        "id" : "50fe0f2c-489c-4ccb-91c3-fb70b71dc3ba",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Not an intrinsic either, all string conversions are library code. \n",
        "createdAt" : "2016-06-30T12:05:15Z",
        "updatedAt" : "2016-06-30T12:05:15Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 397,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement\n+    var lng = i\n+    lng |= (lng >> 1)\n+    lng |= (lng >> 2)\n+    lng |= (lng >> 4)\n+    lng |= (lng >> 8)\n+    lng |= (lng >> 16)\n+    lng |= (lng >> 32)\n+    lng & ~(lng >>> 1)\n+  }\n \n-  def parseUnsignedLongInternal(\n-      s: String, radix: Int, start: Int): scala.Long = ???\n+  def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n+  @inline def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i64`(l, iszeroundef = false).toInt\n+\n+  @inline def parseLong(s: String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n+\n+    parse(s, 1, radix, negative)\n   }\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: String): scala.Long =\n+    parseLong(s, 10)\n+\n+  @inline def parseUnsignedLong(s: String): scala.Long =\n+    parseUnsignedLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def parseUnsignedLong(s: String, radix: Int): scala.Long =\n+    undefined\n \n+  @inline\n   def remainderUnsigned(\n       dividend: scala.Long, divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  def reverse(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bitreverse.i64`(l)\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  def reverseBytes(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bswap.i64`(l)\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i << distance) | (i >>> -distance)\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i >>> distance) | (i << -distance)\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def signum(i: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): String = {\n+    var count =\n+      if (l == 0L) 1\n+      else 64 - numberOfLeadingZeros(l)\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 1) + '0').toChar\n+      j >>= 1\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): String = {\n+    var count =\n+      if (l == 0L) 1\n+      else ((64 + 3) - numberOfLeadingZeros(l)) >> 2\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      var t = (j & 15).toInt\n+      if (t > 9) {\n+        t = t - 10 + 'a'\n+      } else {\n+        t += '0'\n+      }\n+      count -= 1\n+      buffer(count) = t.toChar\n+      j >>= 4\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toOctalString(l: scala.Long): String = {\n+    var count =\n+      if (l == 0L) 1\n+      else ((64 + 2) - numberOfLeadingZeros(l)) / 3\n+    var j = l\n+    val buffer = new Array[Char](count)\n+    do {\n+      count -= 1\n+      buffer(count) = ((j & 7) + '0').toChar\n+      j >>>= 3\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def toBinaryString(l: scala.Long): String = ???\n+  @inline def toString(l: scala.Long): String =\n+    toString(l, 10)\n+\n+  def toString(_l: scala.Long, _radix: Int): String = {\n+    if (_l == 0) {\n+      \"0\"\n+    } else {\n+      val radix =\n+        if (_radix < Character.MIN_RADIX || _radix > Character.MAX_RADIX) 10\n+        else _radix\n+      val negative = _l < 0\n+      var (count, j) =\n+        if (negative) (2, _l)\n+        else (1, -_l)\n+      var l = _l\n+      while (l != 0) {\n+        count += 1\n+        l = l / radix\n+      }\n+\n+      val buffer = new Array[Char](count)\n+      do {\n+        var ch = 0 - (j % radix)\n+        if (ch > 9) {\n+          ch = ch - 10 + 'a'\n+        } else {\n+          ch += '0'\n+        }\n+        count -= 1\n+        buffer(count) = ch.toChar\n+        j = j / radix\n+      } while (j != 0)\n+\n+      if (negative) {\n+        buffer(0) = '-'\n+      }\n+\n+      new String(buffer)\n+    }\n+  }\n \n-  def toHexString(l: scala.Long): String = ???\n+  @inline def toUnsignedString(l: scala.Long, radix: Int): String =\n+    undefined"
  },
  {
    "id" : "30faa37a-8bf8-4bab-a04e-2b7164640165",
    "prId" : 210,
    "comments" : [
      {
        "id" : "c329a49a-e87f-44ce-8468-adfd27f59956",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Use [`llvm.ctpop.i64`](http://llvm.org/docs/LangRef.html#llvm-ctpop-intrinsic) here. \n",
        "createdAt" : "2016-06-30T12:09:15Z",
        "updatedAt" : "2016-06-30T12:09:20Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 91,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {"
  },
  {
    "id" : "28d161e1-2d6b-4b10-a31e-30db0df45a8c",
    "prId" : 210,
    "comments" : [
      {
        "id" : "66f0ff29-a423-4003-949b-175371607eb8",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "No `@inline`.\n",
        "createdAt" : "2016-06-30T12:14:04Z",
        "updatedAt" : "2016-06-30T12:14:04Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 62,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,"
  },
  {
    "id" : "543799ae-df18-4c07-83b4-fa364fad5de5",
    "prId" : 210,
    "comments" : [
      {
        "id" : "8c8eb27d-800d-4ad0-8ce7-15204edfe306",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Please don't leave TODO comments in the code.\n",
        "createdAt" : "2016-06-30T12:15:00Z",
        "updatedAt" : "2016-06-30T12:15:00Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2d046b2267df8f07b713099c1196b41ef081948f",
    "line" : 206,
    "diffHunk" : "@@ -36,81 +48,317 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline private def parse(s: String,\n+                            _offset: Int,\n+                            radix: Int,\n+                            negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      offset += 1\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int = {\n+    var k = (l & 0x5555555555555555L) + ((l >> 1) & 0x5555555555555555L)\n+    k = (k & 0x3333333333333333L) + ((k >> 2) & 0x3333333333333333L)\n+    var i = ((k >>> 32) + k).toInt\n+    i = (i & 0x0F0F0F0F) + ((i >> 4) & 0x0F0F0F0F)\n+    i = (i & 0x00FF00FF) + ((i >> 8) & 0x00FF00FF)\n+    i = (i & 0x0000FFFF) + ((i >> 16) & 0x0000FFFF)\n+    i\n+  }\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    undefined\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+  def highestOneBit(i: scala.Long): scala.Long = {\n+    // ToDo reimplement"
  },
  {
    "id" : "7d105fa9-145e-487d-97d4-260605c3a2bc",
    "prId" : 238,
    "comments" : [
      {
        "id" : "615608fd-96b7-47ef-935e-306ddbc08821",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Why not just `getLong(nm, null)`?\n",
        "createdAt" : "2016-07-11T15:25:49Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bc69f184-de1a-4b9b-b537-f59481fe234c",
        "parentId" : "615608fd-96b7-47ef-935e-306ddbc08821",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Fixed in https://github.com/scala-native/scala-native/pull/238/commits/f0eab14d727ad8978b63a07733f4f4a89798198f\n",
        "createdAt" : "2016-07-12T14:31:27Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }"
  },
  {
    "id" : "1fde6981-fcaa-4469-a6b3-b7765525a9b5",
    "prId" : 238,
    "comments" : [
      {
        "id" : "cf67c3c8-1259-4bbe-a776-cdb7bb1e6215",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "This is not correct when `v eq null`\n",
        "createdAt" : "2016-07-11T15:26:38Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "bf83418e-77df-4ac1-8a30-d032f220a944",
        "parentId" : "cf67c3c8-1259-4bbe-a776-cdb7bb1e6215",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "In `Integer`, the method that held the actual implementation was this one. And `getLong(String, scala.Long)` called this one instead.\n",
        "createdAt" : "2016-07-11T15:27:09Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "200fca66-c419-4e63-b776-221639ece98c",
        "parentId" : "cf67c3c8-1259-4bbe-a776-cdb7bb1e6215",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Fixed in https://github.com/scala-native/scala-native/pull/238/commits/f0eab14d727ad8978b63a07733f4f4a89798198f\n",
        "createdAt" : "2016-07-12T14:31:33Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n+\n+  @inline def getLong(nm: String, v: Long): Long =\n+    getLong(nm, v.longValue)"
  },
  {
    "id" : "381c2d16-a15a-4a2e-ac1f-2564900117f4",
    "prId" : 238,
    "comments" : [
      {
        "id" : "9cfe2957-c902-4b17-859a-6d10c5403b77",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "This should have an implementation similar to that of `Integer.highestOneBit`.\n",
        "createdAt" : "2016-07-11T15:28:21Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "9ab121c1-b712-4893-8d4d-fe54187e6417",
        "parentId" : "9cfe2957-c902-4b17-859a-6d10c5403b77",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Fixed in https://github.com/scala-native/scala-native/pull/238/commits/78016c7a52b2c5da8fa61ecb04b368437103f5ee\n",
        "createdAt" : "2016-07-12T14:23:52Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n+\n+  @inline def getLong(nm: String, v: Long): Long =\n+    getLong(nm, v.longValue)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def highestOneBit(i: scala.Long): scala.Long = {\n+    val x0  = i\n+    val x1  = x0 | (x0 >> 1)\n+    val x2  = x1 | (x1 >> 2)\n+    val x4  = x2 | (x2 >> 4)\n+    val x8  = x4 | (x4 >> 8)\n+    val x16 = x8 | (x8 >> 16)\n+    val x32 = x16 | (x16 >> 32)\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+    x32 & ~(x32 >>> 1)"
  },
  {
    "id" : "d05184b3-efa6-43b4-bac3-ccb728e06061",
    "prId" : 238,
    "comments" : [
      {
        "id" : "5ded92cf-51ac-4221-880a-1e847a6c3ed8",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Same comment as for `Integer.toBinaryString`.\n",
        "createdAt" : "2016-07-11T15:30:14Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "2a26c06b-9248-473b-bed7-c97493d9f6b9",
        "parentId" : "5ded92cf-51ac-4221-880a-1e847a6c3ed8",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Fixed.\n",
        "createdAt" : "2016-07-12T14:23:59Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n+\n+  @inline def getLong(nm: String, v: Long): Long =\n+    getLong(nm, v.longValue)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def highestOneBit(i: scala.Long): scala.Long = {\n+    val x0  = i\n+    val x1  = x0 | (x0 >> 1)\n+    val x2  = x1 | (x1 >> 2)\n+    val x4  = x2 | (x2 >> 4)\n+    val x8  = x4 | (x4 >> 8)\n+    val x16 = x8 | (x8 >> 16)\n+    val x32 = x16 | (x16 >> 32)\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+    x32 & ~(x32 >>> 1)\n+  }\n \n-  def parseUnsignedLongInternal(s: String,\n-                                radix: Int,\n-                                start: Int): scala.Long = ???\n+  @inline def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n-  }\n+  @inline def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def parseLong(s: String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n \n+    parse(s, 1, radix, negative)\n+  }\n+\n+  private def parse(s: String,\n+                    _offset: Int,\n+                    radix: Int,\n+                    negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      offset += 1\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n+\n+  @inline\n   def remainderUnsigned(dividend: scala.Long,\n                         divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverse(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bitreverse.i64`(l)\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverseBytes(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bswap.i64`(l)\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  @inline def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i << distance) | (i >>> -distance)\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  @inline def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i >>> distance) | (i << -distance)\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n-\n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def signum(i: scala.Long): Int = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      j >>= 1\n+      while (j != 0) {\n+        count += 1\n+        j >>= 1\n+      }\n+    }"
  },
  {
    "id" : "361d08ea-4eb7-46f4-ad36-6cc93da5cf11",
    "prId" : 238,
    "comments" : [
      {
        "id" : "4a77ef48-7b27-4026-bbe5-4b31a3d7af0a",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "And here.\n",
        "createdAt" : "2016-07-11T15:30:20Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n+\n+  @inline def getLong(nm: String, v: Long): Long =\n+    getLong(nm, v.longValue)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def highestOneBit(i: scala.Long): scala.Long = {\n+    val x0  = i\n+    val x1  = x0 | (x0 >> 1)\n+    val x2  = x1 | (x1 >> 2)\n+    val x4  = x2 | (x2 >> 4)\n+    val x8  = x4 | (x4 >> 8)\n+    val x16 = x8 | (x8 >> 16)\n+    val x32 = x16 | (x16 >> 32)\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+    x32 & ~(x32 >>> 1)\n+  }\n \n-  def parseUnsignedLongInternal(s: String,\n-                                radix: Int,\n-                                start: Int): scala.Long = ???\n+  @inline def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n-  }\n+  @inline def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def parseLong(s: String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n \n+    parse(s, 1, radix, negative)\n+  }\n+\n+  private def parse(s: String,\n+                    _offset: Int,\n+                    radix: Int,\n+                    negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      offset += 1\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n+\n+  @inline\n   def remainderUnsigned(dividend: scala.Long,\n                         divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverse(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bitreverse.i64`(l)\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverseBytes(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bswap.i64`(l)\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  @inline def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i << distance) | (i >>> -distance)\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  @inline def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i >>> distance) | (i << -distance)\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n-\n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def signum(i: scala.Long): Int = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      j >>= 1\n+      while (j != 0) {\n+        count += 1\n+        j >>= 1\n+      }\n+    }\n+\n+    val buffer = new Array[Char](count)\n+    var k = l\n+    do {\n+      count -= 1\n+      buffer(count) = ((k & 1) + '0').toChar\n+      k >>= 1\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      j >>= 4\n+      while (j != 0) {\n+        count += 1\n+        j >>= 4\n+      }\n+    }"
  },
  {
    "id" : "77856ef7-8995-45db-98b8-09c947ef6c0c",
    "prId" : 238,
    "comments" : [
      {
        "id" : "03e325ea-ad17-4f17-a28a-dbf5861d51d3",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "And here.\n",
        "createdAt" : "2016-07-11T15:30:25Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "a019ff3d-0239-45eb-b689-62757a1ad29b",
        "parentId" : "03e325ea-ad17-4f17-a28a-dbf5861d51d3",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Fixed.\n",
        "createdAt" : "2016-07-12T14:24:03Z",
        "updatedAt" : "2016-07-13T11:57:13Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "2a694216a42c5461c756b55a54fbad96343674b4",
    "line" : null,
    "diffHunk" : "@@ -36,82 +48,339 @@ object Long {\n   final val SIZE      = 64\n   final val BYTES     = 8\n \n-  @inline def toString(i: scala.Long, radix: Int): String = ???\n+  @inline def bitCount(l: scala.Long): scala.Int =\n+    Intrinsics.`llvm.ctpop.i64`(l).toInt\n \n-  @inline def toUnsignedString(i: scala.Long, radix: Int): String = ???\n+  @inline def compare(x: scala.Long, y: scala.Long): scala.Int =\n+    if (x == y) 0\n+    else if (x < y) -1\n+    else 1\n \n-  @inline def toString(i: scala.Long): String = ???\n+  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int =\n+    compare(x ^ scala.Long.MinValue, y ^ scala.Long.MinValue)\n+\n+  def decode(nm: String): Long = {\n+    val length = nm.length()\n+    if (length == 0) {\n+      throw new NumberFormatException()\n+    } else {\n+      var i          = 0\n+      var firstDigit = nm.charAt(i)\n+      val negative = firstDigit == '-'\n+\n+      if (negative) {\n+        if (length == 1) {\n+          throw new NumberFormatException(nm)\n+        }\n+\n+        i += 1\n+        firstDigit = nm.charAt(i)\n+      }\n+\n+      var base = 10\n+      if (firstDigit == '0') {\n+        i += 1\n+        if (i == length) {\n+          return valueOf(0L)\n+        }\n+\n+        firstDigit = nm.charAt(i)\n+        if (firstDigit == 'x' || firstDigit == 'X') {\n+          if (i == length) {\n+            throw new NumberFormatException(nm)\n+          }\n+          i += 1\n+          base = 16\n+        } else {\n+          base = 8\n+        }\n+      } else if (firstDigit == '#') {\n+        if (i == length) {\n+          throw new NumberFormatException(nm)\n+        }\n+        i += 1\n+        base = 16\n+      }\n+\n+      valueOf(parse(nm, i, base, negative))\n+    }\n+  }\n \n-  @inline def toUnsignedString(i: scala.Long): String = ???\n+  @inline\n+  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n+    divULong(dividend, divisor)\n \n-  def parseLong(s: String, radix: Int): scala.Long = ???\n+  def getLong(nm: String): Long =\n+    if (nm == null || nm.length() == 0) {\n+      null\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        null\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            null\n+        }\n+      }\n+    }\n+\n+  def getLong(nm: String, v: scala.Long): Long =\n+    if (nm == null || nm.length() == 0) {\n+      valueOf(v)\n+    } else {\n+      val prop = System.getProperty(nm)\n+      if (prop == null) {\n+        valueOf(v)\n+      } else {\n+        try {\n+          decode(prop)\n+        } catch {\n+          case e: NumberFormatException =>\n+            valueOf(v)\n+        }\n+      }\n+    }\n+\n+  @inline def getLong(nm: String, v: Long): Long =\n+    getLong(nm, v.longValue)\n \n-  @inline def parseLong(s: String): scala.Long =\n-    parseLong(s, 10)\n+  @inline def hashCode(value: scala.Long): Int =\n+    value.toInt ^ (value >>> 32).toInt\n \n-  def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n+  @inline def highestOneBit(i: scala.Long): scala.Long = {\n+    val x0  = i\n+    val x1  = x0 | (x0 >> 1)\n+    val x2  = x1 | (x1 >> 2)\n+    val x4  = x2 | (x2 >> 4)\n+    val x8  = x4 | (x4 >> 8)\n+    val x16 = x8 | (x8 >> 16)\n+    val x32 = x16 | (x16 >> 32)\n \n-  @inline def parseUnsignedLong(s: String): scala.Long =\n-    parseUnsignedLong(s, 10)\n+    x32 & ~(x32 >>> 1)\n+  }\n \n-  def parseUnsignedLongInternal(s: String,\n-                                radix: Int,\n-                                start: Int): scala.Long = ???\n+  @inline def lowestOneBit(i: scala.Long): scala.Long =\n+    i & (-i)\n \n-  @inline def valueOf(longValue: scala.Long): Long = new Long(longValue)\n-  @inline def valueOf(s: String): Long             = valueOf(parseLong(s))\n+  @inline def max(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.max(a, b)\n \n-  @inline def valueOf(s: String, radix: Int): Long =\n-    valueOf(parseLong(s, radix))\n+  @inline def min(a: scala.Long, b: scala.Long): scala.Long =\n+    Math.min(a, b)\n \n-  @inline def hashCode(value: scala.Long): Int =\n-    value.toInt ^ (value >>> 32).toInt\n+  @inline def numberOfLeadingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.ctlz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compare(x: scala.Long, y: scala.Long): scala.Int = {\n-    if (x == y) 0\n-    else if (x < y) -1\n-    else 1\n-  }\n+  @inline def numberOfTrailingZeros(l: scala.Long): Int =\n+    Intrinsics.`llvm.cttz.i64`(l, iszeroundef = false).toInt\n \n-  @inline def compareUnsigned(x: scala.Long, y: scala.Long): scala.Int = ???\n+  @inline def parseLong(s: String): scala.Long =\n+    parseLong(s, 10)\n \n-  def divideUnsigned(dividend: scala.Long, divisor: scala.Long): scala.Long =\n-    divULong(dividend, divisor)\n+  @inline def parseLong(s: String, radix: Int): scala.Long = {\n+    val length   = s.length()\n+    val negative = s.charAt(0) == '-'\n+\n+    if (s == null || radix > Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+    if (length == 0) throw new NumberFormatException(s)\n+    if (negative && length == 1) throw new NumberFormatException(s)\n \n+    parse(s, 1, radix, negative)\n+  }\n+\n+  private def parse(s: String,\n+                    _offset: Int,\n+                    radix: Int,\n+                    negative: scala.Boolean): scala.Long = {\n+    val max = MIN_VALUE / radix\n+    var result = 0\n+    var offset = _offset\n+    val length = s.length()\n+    while (offset < length) {\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      offset += 1\n+      if (digit == -1) throw new NumberFormatException(s)\n+      if (max > result) throw new NumberFormatException(s)\n+      val next = result * radix - digit\n+      if (next > result) throw new NumberFormatException(s)\n+      result = next\n+    }\n+\n+    if (!negative) {\n+      result = -result\n+      if (result < 0) {\n+        throw new NumberFormatException(s)\n+      }\n+    }\n+\n+    result\n+  }\n+\n+  @inline\n   def remainderUnsigned(dividend: scala.Long,\n                         divisor: scala.Long): scala.Long =\n     remULong(dividend, divisor)\n \n-  def highestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverse(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bitreverse.i64`(l)\n \n-  def lowestOneBit(i: scala.Long): scala.Long = ???\n+  @inline def reverseBytes(l: scala.Long): scala.Long =\n+    Intrinsics.`llvm.bswap.i64`(l)\n \n-  def bitCount(i: scala.Long): scala.Int = ???\n+  @inline def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i << distance) | (i >>> -distance)\n \n-  def reverseBytes(i: scala.Long): scala.Long = ???\n+  @inline def rotateRight(i: scala.Long, distance: scala.Int): scala.Long =\n+    (i >>> distance) | (i << -distance)\n \n-  def rotateLeft(i: scala.Long, distance: scala.Int): scala.Long = ???\n-\n-  def rotateRight(i: scala.Long, distance: scala.Int): scala.Long = ???\n+  @inline def signum(i: scala.Long): scala.Int =\n+    if (i == 0) 0\n+    else if (i < 0) -1\n+    else 1\n \n-  def signum(i: scala.Long): Int = ???\n+  @inline def sum(a: scala.Long, b: scala.Long): scala.Long =\n+    a + b\n \n-  def numberOfLeadingZeros(l: scala.Long): Int = ???\n+  def toBinaryString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 64\n+    } else {\n+      j >>= 1\n+      while (j != 0) {\n+        count += 1\n+        j >>= 1\n+      }\n+    }\n+\n+    val buffer = new Array[Char](count)\n+    var k = l\n+    do {\n+      count -= 1\n+      buffer(count) = ((k & 1) + '0').toChar\n+      k >>= 1\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def numberOfTrailingZeros(l: scala.Long): Int = ???\n+  def toHexString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 16\n+    } else {\n+      j >>= 4\n+      while (j != 0) {\n+        count += 1\n+        j >>= 4\n+      }\n+    }\n+\n+    val buffer = new Array[Char](count)\n+    var k = l\n+    do {\n+      var t = (k & 15).toInt\n+      if (t > 9) {\n+        t = t - 10 + 'a'\n+      } else {\n+        t += '0'\n+      }\n+      count -= 1\n+      buffer(count) = t.toChar\n+      k >>= 4\n+    } while (count > 0)\n+\n+    new String(buffer)\n+  }\n \n-  def toBinaryString(l: scala.Long): String = ???\n+  def toOctalString(l: scala.Long): String = {\n+    var count = 1\n+    var j     = l\n+    if (l < 0) {\n+      count = 22\n+    } else {\n+      j >>>= 3\n+      while (j != 0) {\n+        count += 1\n+        j >>>= 3\n+      }\n+    }"
  },
  {
    "id" : "edefe2fb-d6cb-4a2d-9af6-6c86bd9b072f",
    "prId" : 346,
    "comments" : [
      {
        "id" : "19581426-2363-4607-a32d-5b83db40dd36",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "The same problem with addition overflow appears here. Test case: `JLong.parseUnsignedLong(\"18446744073709551616\")`\n",
        "createdAt" : "2016-10-22T09:38:28Z",
        "updatedAt" : "2016-10-24T20:17:08Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "447905ab4bcdb07c44fb14c6049d8537c1120295",
    "line" : null,
    "diffHunk" : "@@ -338,9 +338,82 @@ object Long {\n   @inline def valueOf(s: String, radix: Int): Long =\n     valueOf(parseLong(s, radix))\n \n-  // TODO:\n-  // def parseUnsignedLong(s: String): scala.Long = parseUnsignedLong(s, 10)\n-  // def parseUnsignedLong(s: String, radix: Int): scala.Long = ???\n-  // def toUnsignedString(l: scala.Long): String = toUnsignedString(l, 10)\n-  // def toUnsignedString(l: scala.Long, radix: Int): String = ???\n+  @inline def parseUnsignedLong(s: String): scala.Long =\n+    parseUnsignedLong(s, 10)\n+\n+  def parseUnsignedLong(s: String, radix: Int): scala.Long = {\n+    if (s == null || radix < Character.MIN_RADIX ||\n+        radix > Character.MAX_RADIX) throw new NumberFormatException(s)\n+\n+    val len = s.length()\n+\n+    if (len == 0) throw new NumberFormatException(s)\n+\n+    val hasPlusSign = s.charAt(0) == '+'\n+\n+    if (hasPlusSign && len == 1) throw new NumberFormatException(s)\n+\n+    val offset = if (hasPlusSign) 1 else 0\n+\n+    parseUnsigned(s, offset, radix)\n+  }\n+\n+  private def parseUnsigned(s: String, _offset: Int, radix: Int): scala.Long = {\n+    val unsignedLongMaxValue = -1L\n+    val max                  = divideUnsigned(unsignedLongMaxValue, radix)\n+    var result = 0L\n+    var offset = _offset\n+    val length = s.length()\n+\n+    while (offset < length) {\n+      val digit = Character.digit(s.charAt(offset), radix)\n+      offset += 1\n+\n+      if (digit == -1) throw new NumberFormatException(s)\n+\n+      if (compareUnsigned(result, max) == 1) throw new NumberFormatException(s)\n+\n+      result = result * radix + digit\n+    }"
  },
  {
    "id" : "1fe05b7a-08af-49e0-bf1f-608473fd6044",
    "prId" : 514,
    "comments" : [
      {
        "id" : "afb79b41-03d3-4841-ab4b-f00b99e51c1b",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Shouldn't you put `case other: java.lang.Long` first as a fast-path? And similarly for all other variants.",
        "createdAt" : "2017-02-21T13:06:17Z",
        "updatedAt" : "2017-02-21T13:06:17Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "78736258-c39a-4db3-8e8a-cefe52371241",
        "parentId" : "afb79b41-03d3-4841-ab4b-f00b99e51c1b",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Good point. ",
        "createdAt" : "2017-02-21T13:46:08Z",
        "updatedAt" : "2017-02-21T13:46:08Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8747091e1bd208b14263d86931b02de60063476a",
    "line" : 66,
    "diffHunk" : "@@ -2,43 +2,62 @@ package java.lang\n \n import scalanative.runtime.{select, divULong, remULong, undefined, Intrinsics}\n \n-final class Long(val longValue: scala.Long)\n-    extends Number\n-    with Comparable[Long] {\n+final class Long(val _value: scala.Long) extends Number with Comparable[Long] {\n   @inline def this(s: String) =\n     this(Long.parseLong(s))\n \n   @inline override def byteValue(): scala.Byte =\n-    longValue.toByte\n+    _value.toByte\n \n   @inline override def shortValue(): scala.Short =\n-    longValue.toShort\n+    _value.toShort\n \n-  @inline def intValue(): scala.Int =\n-    longValue.toInt\n+  @inline override def intValue(): scala.Int =\n+    _value.toInt\n \n-  @inline def floatValue(): scala.Float =\n-    longValue.toFloat\n+  @inline override def longValue(): scala.Long =\n+    _value\n \n-  @inline def doubleValue(): scala.Double =\n-    longValue.toDouble\n+  @inline override def floatValue(): scala.Float =\n+    _value.toFloat\n+\n+  @inline override def doubleValue(): scala.Double =\n+    _value.toDouble\n \n   @inline override def equals(that: Any): scala.Boolean =\n     that match {\n       case that: Long =>\n-        longValue == that.longValue\n+        _value == that._value\n       case _ =>\n         false\n     }\n \n   @inline override def hashCode(): Int =\n-    Long.hashCode(longValue)\n+    Long.hashCode(_value)\n \n   @inline override def compareTo(that: Long): Int =\n-    Long.compare(longValue, that.longValue)\n+    Long.compare(_value, that._value)\n \n   @inline override def toString(): String =\n-    Long.toString(longValue)\n+    Long.toString(_value)\n+\n+  @inline override def __scala_==(other: _Object): scala.Boolean =\n+    other match {\n+      case other: java.lang.Byte    => _value == other._value.toLong\n+      case other: java.lang.Short   => _value == other._value.toLong\n+      case other: java.lang.Integer => _value == other._value.toLong\n+      case other: java.lang.Long    => _value == other._value\n+      case other: java.lang.Float   => _value.toFloat == other._value\n+      case other: java.lang.Double  => _value.toDouble == other._value\n+      case _                        => super.__scala_==(other)"
  }
]