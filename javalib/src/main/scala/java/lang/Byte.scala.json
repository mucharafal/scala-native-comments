[
  {
    "id" : "523cb9b5-e4dd-4878-af81-392d6fc7bf22",
    "prId" : 173,
    "comments" : [
      {
        "id" : "cdda5cc7-6f8b-4bf0-a3b4-a5a697cc7cc6",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "Those two should have `undefined` as the body of the method (they'll are going to be intrinsified.)\n",
        "createdAt" : "2016-06-21T11:38:26Z",
        "updatedAt" : "2016-06-24T06:14:48Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      },
      {
        "id" : "42e98fa1-ae81-4593-a825-1f4df51ca821",
        "parentId" : "cdda5cc7-6f8b-4bf0-a3b4-a5a697cc7cc6",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Do they really need to be known by the compiler? They have very easy user-space implementations:\n\n``` scala\ndef toUnsignedInt(x: scala.Byte): scala.Int = x.toInt & 0xff\n\ndef toUnsignedLong(x: scala.Byte): scala.Long = x.toLong & 0xffL\n```\n",
        "createdAt" : "2016-06-22T07:47:53Z",
        "updatedAt" : "2016-06-24T06:14:48Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
          {
            "value" : "outdated"
          }
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : null,
    "diffHunk" : "@@ -39,30 +52,48 @@ object Byte {\n    * against the JDK .class files anyway.\n    */\n   def MIN_VALUE: scala.Byte = -128\n+\n   def MAX_VALUE: scala.Byte = 127\n \n-  @inline def valueOf(byteValue: scala.Byte): Byte = new Byte(byteValue)\n-  @inline def valueOf(s: String): Byte             = valueOf(parseByte(s))\n+  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n+    x - y\n \n-  @inline def valueOf(s: String, radix: Int): Byte =\n-    valueOf(parseByte(s, radix))\n+  @inline def decode(nm: _String): Byte = {\n+    val i = Integer.decode(nm).intValue\n+    val b = i.toByte\n+    if (b == i)\n+      valueOf(b)\n+    else\n+      throw new NumberFormatException()\n+  }\n \n-  @inline def parseByte(s: String): scala.Byte = parseByte(s, 10)\n+  @inline def hashCode(b: scala.Byte): scala.Int =\n+    b.toInt\n \n-  def parseByte(s: String, radix: Int): scala.Byte = {\n-    val r = Integer.parseInt(s, radix)\n-    if (r < MIN_VALUE || r > MAX_VALUE)\n+  @inline def parseByte(s: _String, radix: scala.Int): scala.Byte = {\n+    val i = Integer.parseInt(s, radix)\n+    if (i < MIN_VALUE || i > MAX_VALUE)\n       throw new NumberFormatException(s\"\"\"For input string: \"$s\"\"\"\")\n     else\n-      r.toByte\n+      i.toByte\n   }\n \n-  @inline def toString(b: scala.Byte): String =\n-    String.valueOf(b)\n+  @inline def parseByte(s: _String): scala.Byte =\n+    parseByte(s, 10)\n \n-  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n-    x - y\n+  @inline def toString(b: scala.Byte): _String =\n+    Integer.toString(b)\n \n-  @inline def hashCode(b: scala.Byte): scala.Int =\n-    b\n+//  def toUnsignedInt(x: scala.Byte): scala.Int =\n+\n+//  def toUnsignedLong(x: scala.Byte): scala.Long ="
  },
  {
    "id" : "e070a296-2f1b-4d1a-b04e-08e3e1987b4a",
    "prId" : 173,
    "comments" : [
      {
        "id" : "d5fb10a6-d4e6-4715-9ae6-fb1c1c7d217b",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`= undefined`\n",
        "createdAt" : "2016-06-25T10:23:34Z",
        "updatedAt" : "2016-06-25T10:23:34Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 98,
    "diffHunk" : "@@ -39,30 +54,50 @@ object Byte {\n    * against the JDK .class files anyway.\n    */\n   def MIN_VALUE: scala.Byte = -128\n+\n   def MAX_VALUE: scala.Byte = 127\n \n-  @inline def valueOf(byteValue: scala.Byte): Byte = new Byte(byteValue)\n-  @inline def valueOf(s: String): Byte             = valueOf(parseByte(s))\n+  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n+    x - y\n \n-  @inline def valueOf(s: String, radix: Int): Byte =\n-    valueOf(parseByte(s, radix))\n+  @inline def decode(nm: _String): Byte = {\n+    val i = Integer.decode(nm).intValue\n+    val b = i.toByte\n+    if (b == i)\n+      valueOf(b)\n+    else\n+      throw new NumberFormatException()\n+  }\n \n-  @inline def parseByte(s: String): scala.Byte = parseByte(s, 10)\n+  @inline def hashCode(b: scala.Byte): scala.Int =\n+    b.toInt\n \n-  def parseByte(s: String, radix: Int): scala.Byte = {\n-    val r = Integer.parseInt(s, radix)\n-    if (r < MIN_VALUE || r > MAX_VALUE)\n+  @inline def parseByte(s: _String, radix: scala.Int): scala.Byte = {\n+    val i = Integer.parseInt(s, radix)\n+    if (i < MIN_VALUE || i > MAX_VALUE)\n       throw new NumberFormatException(s\"\"\"For input string: \"$s\"\"\"\")\n     else\n-      r.toByte\n+      i.toByte\n   }\n \n-  @inline def toString(b: scala.Byte): String =\n-    String.valueOf(b)\n+  @inline def parseByte(s: _String): scala.Byte =\n+    parseByte(s, 10)\n \n-  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n-    x - y\n+  @inline def toString(b: scala.Byte): _String =\n+    Integer.toString(b)\n \n-  @inline def hashCode(b: scala.Byte): scala.Int =\n-    b\n+  def toUnsignedInt(x: scala.Byte): scala.Int =\n+    x.toInt & 0xff"
  },
  {
    "id" : "6328ab49-4525-4c05-bfba-2cd460810602",
    "prId" : 173,
    "comments" : [
      {
        "id" : "533b80bc-b085-4b99-af62-6f3fba37f376",
        "parentId" : null,
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "`= undefined`\n",
        "createdAt" : "2016-06-25T10:23:38Z",
        "updatedAt" : "2016-06-25T10:23:38Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "89f23c892632c30d769c688317dfdcda0654b1a0",
    "line" : 101,
    "diffHunk" : "@@ -39,30 +54,50 @@ object Byte {\n    * against the JDK .class files anyway.\n    */\n   def MIN_VALUE: scala.Byte = -128\n+\n   def MAX_VALUE: scala.Byte = 127\n \n-  @inline def valueOf(byteValue: scala.Byte): Byte = new Byte(byteValue)\n-  @inline def valueOf(s: String): Byte             = valueOf(parseByte(s))\n+  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n+    x - y\n \n-  @inline def valueOf(s: String, radix: Int): Byte =\n-    valueOf(parseByte(s, radix))\n+  @inline def decode(nm: _String): Byte = {\n+    val i = Integer.decode(nm).intValue\n+    val b = i.toByte\n+    if (b == i)\n+      valueOf(b)\n+    else\n+      throw new NumberFormatException()\n+  }\n \n-  @inline def parseByte(s: String): scala.Byte = parseByte(s, 10)\n+  @inline def hashCode(b: scala.Byte): scala.Int =\n+    b.toInt\n \n-  def parseByte(s: String, radix: Int): scala.Byte = {\n-    val r = Integer.parseInt(s, radix)\n-    if (r < MIN_VALUE || r > MAX_VALUE)\n+  @inline def parseByte(s: _String, radix: scala.Int): scala.Byte = {\n+    val i = Integer.parseInt(s, radix)\n+    if (i < MIN_VALUE || i > MAX_VALUE)\n       throw new NumberFormatException(s\"\"\"For input string: \"$s\"\"\"\")\n     else\n-      r.toByte\n+      i.toByte\n   }\n \n-  @inline def toString(b: scala.Byte): String =\n-    String.valueOf(b)\n+  @inline def parseByte(s: _String): scala.Byte =\n+    parseByte(s, 10)\n \n-  @inline def compare(x: scala.Byte, y: scala.Byte): scala.Int =\n-    x - y\n+  @inline def toString(b: scala.Byte): _String =\n+    Integer.toString(b)\n \n-  @inline def hashCode(b: scala.Byte): scala.Int =\n-    b\n+  def toUnsignedInt(x: scala.Byte): scala.Int =\n+    x.toInt & 0xff\n+\n+  def toUnsignedLong(x: scala.Byte): scala.Long =\n+    x.toLong & 0xffL"
  },
  {
    "id" : "06fa2b54-3a7f-4cdc-937f-e718455ae3e8",
    "prId" : 514,
    "comments" : [
      {
        "id" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "You forgot `Character`",
        "createdAt" : "2017-02-21T12:59:40Z",
        "updatedAt" : "2017-02-21T12:59:40Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d723caf5-4701-4810-a96a-454add27e63a",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "Also, I suggest just writing `_value == other._value` in all the cases. Let the primitive `==` (on primitive operands) do the appropriate conversions in all cases. I think it would be safer.",
        "createdAt" : "2017-02-21T13:00:54Z",
        "updatedAt" : "2017-02-21T13:00:54Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d537cfbc-48c8-491b-bcf7-8887e7fe2d36",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "~~And you also forgot `ScalaNumber`. If `other` is a `ScalaNumber`, you need to delegate to `other.equals(this)`. This is true in all of `Character`, `Byte`, `Short`, `Integer`, `Long`, `Float` and `Double`.~~\r\n\r\nAh I see you took care of that in `Number.__scala_==`. So that's fine.",
        "createdAt" : "2017-02-21T13:03:10Z",
        "updatedAt" : "2017-02-21T13:07:24Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "269805ff-8fb7-4bda-92ad-9b5c696e3a07",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "body" : "@densh, why don't you simply reuse implementation from ScalaRuntime? Same with `__scala_##`",
        "createdAt" : "2017-02-21T13:05:19Z",
        "updatedAt" : "2017-02-21T13:05:19Z",
        "lastEditedBy" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c927458e-0f44-4a48-9603-4fd32da0fa12",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "body" : "https://github.com/scala/scala/commit/5e7e81ab2a39182b8150c0d661cdbc89ca82c5b0#diff-0d6df8c6e82b95e5c0d2f4b2662688f5L168 - here's implementation that you can simply copy.",
        "createdAt" : "2017-02-21T13:08:26Z",
        "updatedAt" : "2017-02-21T13:08:55Z",
        "lastEditedBy" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "85867df5-ddbc-4657-b654-5417377119ef",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "@DarkDimius The advantage of this solution is that, when you have `x == y` and both are `Any`s (or generic types), you can always compile this as a dynamic dispatch on `x.__scala_==(y)` (when `x ne null`). You don't need to have a bunch of instance tests first, then only fall back on calling `equals` if `x` is a `Foo`. So this solution speeds up the non-`Number` case so that it is not slower than Java's `equals()`. And for `java.lang.Integer` and friends, you can also fast-path the happy case where the rhs is of the same type as you are. This allows `==` not to have any performance degradation versus `equals` (a well-known issue of `==` and `Map`s in Scala/JVM).",
        "createdAt" : "2017-02-21T13:13:24Z",
        "updatedAt" : "2017-02-21T13:13:24Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e065e512-44ae-4d44-9202-555a4f32e4e9",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "body" : "> This allows == not to have any performance degradation versus equals (a well-known issue of == and Maps in Scala/JVM).\r\n\r\nI don't think it's fare to compare performance degradation across different VMs. But I get your point.",
        "createdAt" : "2017-02-21T13:17:30Z",
        "updatedAt" : "2017-02-21T13:17:31Z",
        "lastEditedBy" : {
          "login" : "DarkDimius",
          "name" : null,
          "avatarUrl" : "https://avatars2.githubusercontent.com/u/1084930?u=4d7224bafc59d579b227c92ee0b965947186d9e2&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3a952ba0-2b16-4077-8c94-702bf976802c",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "@DarkDimius Mine implementation seems to be way easier to understand. I didn't tune performance yet at all.",
        "createdAt" : "2017-02-21T13:50:59Z",
        "updatedAt" : "2017-02-21T13:51:09Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c0859e3c-f12a-4ea0-b42b-d7d2cad1dd79",
        "parentId" : "ea494a1a-443a-40b0-9807-3f8fa00038b1",
        "author" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "body" : "@sjrd Agreed on `_value == other._value`",
        "createdAt" : "2017-02-21T13:53:17Z",
        "updatedAt" : "2017-02-21T13:53:17Z",
        "lastEditedBy" : {
          "login" : "densh",
          "name" : null,
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/320966?u=784f6f761f35b8b7f3f787172b468334d6524524&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "8747091e1bd208b14263d86931b02de60063476a",
    "line" : 68,
    "diffHunk" : "@@ -2,43 +2,55 @@ package java.lang\n \n import scalanative.runtime.{byteToUInt, byteToULong}\n \n-final class Byte(override val byteValue: scala.Byte)\n-    extends Number\n-    with Comparable[Byte] {\n+final class Byte(val _value: scala.Byte) extends Number with Comparable[Byte] {\n   @inline def this(s: String) =\n     this(Byte.parseByte(s))\n \n+  @inline override def byteValue(): scala.Byte =\n+    _value\n+\n   @inline override def shortValue(): scala.Short =\n-    byteValue.toShort\n+    _value.toShort\n \n-  @inline def intValue(): scala.Int =\n-    byteValue.toInt\n+  @inline override def intValue(): scala.Int =\n+    _value.toInt\n \n-  @inline def longValue(): scala.Long =\n-    byteValue.toLong\n+  @inline override def longValue(): scala.Long =\n+    _value.toLong\n \n-  @inline def floatValue(): scala.Float =\n-    byteValue.toFloat\n+  @inline override def floatValue(): scala.Float =\n+    _value.toFloat\n \n-  @inline def doubleValue(): scala.Double =\n-    byteValue.toDouble\n+  @inline override def doubleValue(): scala.Double =\n+    _value.toDouble\n \n   @inline override def equals(that: Any): scala.Boolean =\n     that match {\n-      case that: Byte =>\n-        byteValue == that.byteValue\n+      case that: java.lang.Byte =>\n+        _value == that._value\n       case _ =>\n         false\n     }\n \n   @inline override def hashCode(): Int =\n-    Byte.hashCode(byteValue)\n+    _value\n \n   @inline override def compareTo(that: Byte): Int =\n-    Byte.compare(byteValue, that.byteValue)\n+    Byte.compare(_value, that._value)\n \n   @inline override def toString(): String =\n-    Byte.toString(byteValue)\n+    Byte.toString(_value)\n+\n+  @inline override def __scala_==(other: _Object): scala.Boolean =\n+    other match {\n+      case other: java.lang.Byte    => _value == other._value\n+      case other: java.lang.Short   => _value.toShort == other._value\n+      case other: java.lang.Integer => _value.toInt == other._value\n+      case other: java.lang.Long    => _value.toLong == other._value\n+      case other: java.lang.Float   => _value.toFloat == other._value\n+      case other: java.lang.Double  => _value.toDouble == other._value\n+      case _                        => super.__scala_==(other)"
  },
  {
    "id" : "2c60ab63-d3fe-4a69-843a-e57b74e4b14c",
    "prId" : 1000,
    "comments" : [
      {
        "id" : "6e7c23de-621b-4f53-8631-295b4156652d",
        "parentId" : null,
        "author" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "body" : "I suggest you fill in that cache immediately, so that you avoid the branching in `valueOf` altogether.\r\n\r\nSame for the other caches, except of course for `Short`, `Int` and `Long` you still have the branch for whether it's small enough.",
        "createdAt" : "2017-09-04T15:29:02Z",
        "updatedAt" : "2017-09-05T14:50:02Z",
        "lastEditedBy" : {
          "login" : "sjrd",
          "name" : null,
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/535934?u=837d8ccc05f624946f9fbec6a81ecb1eb519031b&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "06a264eb99f8de9fdf1bfefda5d32e5b0e0e207c",
    "line" : 28,
    "diffHunk" : "@@ -225,12 +225,27 @@ object Byte {\n   @inline def toUnsignedLong(x: scala.Byte): scala.Long =\n     byteToULong(x)\n \n-  @inline def valueOf(byteValue: scala.Byte): Byte =\n-    new Byte(byteValue)\n+  import ByteCache.cache\n+\n+  @inline def valueOf(byteValue: scala.Byte): Byte = {\n+    val idx    = byteValue - MIN_VALUE\n+    val cached = cache(idx)\n+    if (cached != null) {\n+      cached\n+    } else {\n+      val newbyte = new Byte(byteValue)\n+      cache(idx) = newbyte\n+      newbyte\n+    }\n+  }\n \n   @inline def valueOf(s: String): Byte =\n     valueOf(parseByte(s))\n \n   @inline def valueOf(s: String, radix: scala.Int): Byte =\n     valueOf(parseByte(s, radix))\n }\n+\n+private[lang] object ByteCache {\n+  private[lang] val cache = new Array[java.lang.Byte](256)"
  }
]